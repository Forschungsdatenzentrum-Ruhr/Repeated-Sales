# vars are allowed to deviate up to this factor in both directions
# variable names are used for identification of typing
# _multi
# _add
# first element indicates variable name
# last element indicates offset type

#TO DO:
# swap t() for pivot_wider
# make offsets dynamic via inputs


offsets <- tibble::tribble(
  ~rowname, ~similar_offset, ~exact_offset, ~offset_type,
  "wohnflaeche", 0.1, 0.05, "multi",
  "etage", 99, 0, "add",
  "zimmeranzahl", 0.5, 0, "add",
  "time", 0, 6, NA
)

col_list <- latlon_utm %>% select(etage, zimmeranzahl, wohnflaeche, counting_id)


between_ext <- function(col_list = NA, offsets = offsets) {
  
  inital <- t(col_list[1, ]) %>%
    as_tibble(rownames = NA) %>%
    set_colnames("baseline") %>%
    rownames_to_column()

  inital %<>% merge(offsets, by = "rowname", all.x = T) %>% summarise(
    rowname = rowname,
    similar_left = case_when(
      offset_type == "add" ~ baseline - similar_offset,
      offset_type == "multi" ~ baseline * (1 - similar_offset)
    ),
    similar_right = case_when(
      offset_type == "add" ~ baseline + similar_offset,
      offset_type == "multi" ~ baseline * (1 + similar_offset)
    ),
    exact_left = case_when(
      offset_type == "add" ~ baseline - exact_offset,
      offset_type == "multi" ~ baseline * (1 - exact_offset)
    ),
    exact_right = case_when(
      offset_type == "add" ~ baseline + exact_offset,
      offset_type == "multi" ~ baseline * (1 + exact_offset)
    )
  )

  col_list$repeated_id <- merge(inital ,t(col_list), by.x = "rowname", by.y = 0) %>%
    summarise(
      across(
        starts_with("V"),
        ~ case_when(
          . >= exact_left & exact_right >= . ~ 1,
          . >= similar_left & similar_right >= . ~ 0,
          TRUE ~ -1
        )
      )
    ) %>% slice(-1) %>%
    summarise(
      across(
        starts_with("V"),
        ~ case_when(
          -1 %in% . ~ -1,
          0 %in% . ~ 0,
          TRUE ~ 1
        )
      )
    ) %>% t()





  args <- list(left = left, right = right)
  args <- vec_cast_common(!!!args, .to = x)
  args <- vec_recycle_common(!!!args, .size = vec_size(x))
  left <- args[[1L]]
  right <- args[[2L]]

  left <- vec_compare(x, left)
  left <- left >= 0L

  right <- vec_compare(x, right)
  right <- right <= 0L

  left & right
}



classify_data <- function(latlon_utm) {
  a <- tar_read(classification_1_eb0035cf)
  latlon_utm <- a

  latlon_utm %<>%
    arrange(amonths) %>%
    select(var_of_interest, data_end_date, counting_id)



  timestamp()
}
