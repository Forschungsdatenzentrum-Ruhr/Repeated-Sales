# Cluster Class
cluster = R6::R6Class("cluster",
                      public = list(
                        
                        # default values
                        cluster_options = NULL,
                        distance = NULL,
                        means = NULL,
                        sim_dist = NULL,
                        sequence = NULL,
                        cluster_names = NULL,
                        subset = NULL,
                        min_ss = NULL,
                        centers = NULL,
                        
                        # initial value setup
                        initialize = function(cluster_options = NULL,
                                              distance = NULL,
                                              means = NULL,
                                              cluster_names = NULL,
                                              sim_dist = data.table(),
                                              sequence = NULL,
                                              subset = NULL,
                                              min_ss = NULL,
                                              centers = data.table()) {
                          
                          # calculation helpers
                          self$cluster_options <-  unique(apply(!is.na(cluster_options),1,which, simplify = F))
                          self$cluster_names = attr(cluster_options,"names")
                          self$distance = distance
                          self$means = means
                          self$sequence = seq_along(means)
                          
                        },
                        # actual cluster sequence
                        determine_cluster_centers = function(){
                          
                          # consider all unique combinations of clusters
                          # catch single obs cases. keep for now with parent = child
                          if(length(self$cluster_options) == 1 & 1 %in% lengths(self$cluster_options)){
                            
                            self$centers = data.table(
                              "sim_dist" = 0,
                              "counting_id" = as.numeric(self$cluster_names),
                              "parent" = as.numeric(self$cluster_names)
                            )
                            
                          } else {
                            
                            for(cluster_option in self$cluster_options){
                              
                              # subset to current cluster_option
                              self$subset = self$sequence[self$cluster_names %in% names(cluster_option)]
                              
                              # extract minimum 
                              self$min_ss = self$subset[which.min(self$means[self$subset])]
                              
                              # assign both temp data.table
                              temp2 = data.table(
                                "sim_dist" = as.numeric(self$distance[self$min_ss,self$subset, with = F])
                              )
                              # bind temp data.table with itself for each iteration
                              #print(self$sim_dist)
                              #print(t(temp2))
                              self$sim_dist = rbind(self$sim_dist, temp2)
                              
                              # assign temp data.table
                              temp = data.table(
                                "counting_id" = as.numeric(names(cluster_option)),
                                "parent" = as.numeric(self$cluster_names[self$min_ss])
                              )
                              # bind temp data.table with itself for each iteration
                              self$centers = rbind(self$centers, temp)
                              
                            }
                            # overwrite total dist with current rel distance
                            self$centers$sim_dist = self$sim_dist
                          }
                          
                        }
                        
                      )
                      
                      
)
