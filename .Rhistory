# calculate similarity-borders
mutate(
## resembling-similiarity-range
# left border
resembling_left = case_when(
offset_type == "add" ~ baseline - resembling_offset,
offset_type == "multi" ~ baseline * (1 - resembling_offset)
),
# right border
resembling_right = case_when(
offset_type == "add" ~ baseline + resembling_offset,
offset_type == "multi" ~ baseline * (1 + resembling_offset)
),
## exact-similiarity-range
# left border
exact_left = case_when(
offset_type == "add" ~ baseline - exact_offset,
offset_type == "multi" ~ baseline * (1 - exact_offset)
),
# right border
exact_right = case_when(
offset_type == "add" ~ baseline + exact_offset,
offset_type == "multi" ~ baseline * (1 + exact_offset)
,
.keep = "unused"
)
)
## calculate similarity-ranges of potential parent
similarity_ranges <- tbl_transpose(.data[1, ]) %>%
set_colnames("baseline") %>%
mutate(categorie = col_names) %>%
merge(range_offsets, by = "categorie", all.x = T) %>%
# calculate similarity-borders
mutate(
## resembling-similiarity-range
# left border
resembling_left = case_when(
offset_type == "add" ~ baseline - resembling_offset,
offset_type == "multi" ~ baseline * (1 - resembling_offset)
),
# right border
resembling_right = case_when(
offset_type == "add" ~ baseline + resembling_offset,
offset_type == "multi" ~ baseline * (1 + resembling_offset)
),
## exact-similiarity-range
# left border
exact_left = case_when(
offset_type == "add" ~ baseline - exact_offset,
offset_type == "multi" ~ baseline * (1 - exact_offset)
),
# right border
exact_right = case_when(
offset_type == "add" ~ baseline + exact_offset,
offset_type == "multi" ~ baseline * (1 + exact_offset)
),
.keep = "unused"
)
# attach similarity-ranges to .data for comparisons
between_id <- merge(similarity_ranges, t(.data), by = "categorie")
t(.data)
.data %>% select(col_names) |> tbl_transpose()
similarity_ranges <- select(1) %>%
set_colnames("baseline") %>%
mutate(categorie = col_names)
similarity_ranges <- select(!!1)
similarity_ranges <- select("V1") %>%
set_colnames("baseline") %>%
mutate(categorie = col_names) %>%
merge(range_offsets, by = "categorie", all.x = T)
similarity_ranges <- select(V1) %>%
set_colnames("baseline") %>%
mutate(categorie = col_names) %>%
merge(range_offsets, by = "categorie", all.x = T)
# reduce data to relevant columns
.data %<>% select(col_names) |> tbl_transpose()
similarity_ranges <- .data |>  select(1)
View(similarity_ranges)
# reduce data to relevant columns
.data %<>% select(col_names) %>% tbl_transpose()
similarity_ranges <- .data |>  select(1)
View(similarity_ranges)
similarity_ranges <- .data |>  select(V1) %>%
mutate(
baseline = V1,
categorie = col_names,
.keep = "used"
)
View(similarity_ranges)
similarity_ranges <- .data |>  select(V1) %>%
mutate(
baseline = V1,
categorie = col_names,
.keep = "unused"
)
similarity_ranges <- .data |>  select(V1) %>%
mutate(
baseline = V1,
categorie = col_names,
.keep = "unused"
) %>%
merge(range_offsets, by = "categorie", all.x = T) %>%
# calculate similarity-borders
mutate(
## resembling-similiarity-range
# left border
resembling_left = case_when(
offset_type == "add" ~ baseline - resembling_offset,
offset_type == "multi" ~ baseline * (1 - resembling_offset)
),
# right border
resembling_right = case_when(
offset_type == "add" ~ baseline + resembling_offset,
offset_type == "multi" ~ baseline * (1 + resembling_offset)
),
## exact-similiarity-range
# left border
exact_left = case_when(
offset_type == "add" ~ baseline - exact_offset,
offset_type == "multi" ~ baseline * (1 - exact_offset)
),
# right border
exact_right = case_when(
offset_type == "add" ~ baseline + exact_offset,
offset_type == "multi" ~ baseline * (1 + exact_offset)
),
.keep = "unused"
)
# attach similarity-ranges to .data for comparisons
between_id <- merge(similarity_ranges, .data, by = "categorie")
similarity_ranges <- .data %>%
mutate(
baseline = V1,
categorie = col_names,
.keep = "unused"
)
View(similarity_ranges)
# reduce data to relevant columns
.data %<>%
select(col_names) %>%
tbl_transpose() %>%
mutate(
baseline = V1,
categorie = col_names,
.keep = "unused"
) %>%
merge(range_offsets, by = "categorie", all.x = T)
.data %<>%
select(col_names) %>%
tbl_transpose() %>%
mutate(
baseline = V1,
categorie = col_names,
.keep = "unused"
)
.data %<>%
select(categorie_names)
.data
.data = classification_1_fb52a0db
.data %>%
select(categorie_names) %>%
tbl_transpose() %>%
mutate(
baseline = V1,
categorie = categorie_names,
.keep = "unused"
)
# drop time offset
categorie_names <- range_offsets$rowname[!range_offsets$rowname == "time"]
# drop time offset
categorie_names <- range_offsets$categorie[!range_offsets$categorie == "time"]
# reduce data to relevant columns
.data %>%
select(categorie_names) %>%
tbl_transpose() %>%
mutate(
baseline = V1,
categorie = categorie_names,
.keep = "unused"
) %>%
merge(range_offsets, by = "categorie", all.x = T)
.data %>%
select(categorie_names) %>%
tbl_transpose() %>%
mutate(
baseline = V1,
categorie = categorie_names,
.keep = "unused"
)
.data %>%
select(categorie_names) %>%
tbl_transpose() %>%
mutate(
baseline = V1,
categorie = categorie_names,
.keep = "unused"
) %>%
merge(range_offsets, by = "categorie", all.x = T)
range_offsets
.data %>%
select(categorie_names) %>%
tbl_transpose() %>%
mutate(
baseline = V1,
categorie = categorie_names,
.keep = "unused"
)
# script settings
range_offsets <<- tibble::tribble(
~categorie, ~resembling_offset, ~exact_offset, ~offset_type,
"wohnflaeche", 0.1, 0.05, "multi",
"etage", 99, 0, "add",
"zimmeranzahl", 0.5, 0, "add",
"time", 0, 6, NA
)
.data %>%
select(categorie_names) %>%
tbl_transpose() %>%
mutate(
baseline = V1,
categorie = categorie_names,
.keep = "unused"
) %>%
merge(range_offsets, by = "categorie", all.x = T) %>%
# calculate similarity-borders
mutate(
## resembling-similiarity-range
# left border
resembling_left = case_when(
offset_type == "add" ~ baseline - resembling_offset,
offset_type == "multi" ~ baseline * (1 - resembling_offset)
),
# right border
resembling_right = case_when(
offset_type == "add" ~ baseline + resembling_offset,
offset_type == "multi" ~ baseline * (1 + resembling_offset)
),
## exact-similiarity-range
# left border
exact_left = case_when(
offset_type == "add" ~ baseline - exact_offset,
offset_type == "multi" ~ baseline * (1 - exact_offset)
),
# right border
exact_right = case_when(
offset_type == "add" ~ baseline + exact_offset,
offset_type == "multi" ~ baseline * (1 + exact_offset)
),
.keep = "unused"
)
## calculate similarity-ranges of potential parent
similiarity-range = .data %>%
# reduce data to relevant columns
select(categorie_names) %>%
tbl_transpose() %>%
mutate(
baseline = V1,
categorie = categorie_names,
.keep = "unused"
) %>%
merge(range_offsets, by = "categorie", all.x = T) %>%
# calculate similarity-borders
mutate(
## resembling-similiarity-range
# left border
resembling_left = case_when(
offset_type == "add" ~ baseline - resembling_offset,
offset_type == "multi" ~ baseline * (1 - resembling_offset)
),
# right border
resembling_right = case_when(
offset_type == "add" ~ baseline + resembling_offset,
offset_type == "multi" ~ baseline * (1 + resembling_offset)
),
## exact-similiarity-range
# left border
exact_left = case_when(
offset_type == "add" ~ baseline - exact_offset,
offset_type == "multi" ~ baseline * (1 - exact_offset)
),
# right border
exact_right = case_when(
offset_type == "add" ~ baseline + exact_offset,
offset_type == "multi" ~ baseline * (1 + exact_offset)
),
.keep = "unused"
)
## calculate similarity-ranges of potential parent
similiarity_range = .data %>%
# reduce data to relevant columns
select(categorie_names) %>%
tbl_transpose() %>%
mutate(
baseline = V1,
categorie = categorie_names,
.keep = "unused"
) %>%
merge(range_offsets, by = "categorie", all.x = T) %>%
# calculate similarity-borders
mutate(
## resembling-similiarity-range
# left border
resembling_left = case_when(
offset_type == "add" ~ baseline - resembling_offset,
offset_type == "multi" ~ baseline * (1 - resembling_offset)
),
# right border
resembling_right = case_when(
offset_type == "add" ~ baseline + resembling_offset,
offset_type == "multi" ~ baseline * (1 + resembling_offset)
),
## exact-similiarity-range
# left border
exact_left = case_when(
offset_type == "add" ~ baseline - exact_offset,
offset_type == "multi" ~ baseline * (1 - exact_offset)
),
# right border
exact_right = case_when(
offset_type == "add" ~ baseline + exact_offset,
offset_type == "multi" ~ baseline * (1 + exact_offset)
),
.keep = "unused"
)
View(similiarity_range)
categorie_names <- range_offsets$categorie[!range_offsets$categorie == "time"]
## calculate similarity-ranges of potential parent
similiarity_range = .data %>%
# reduce data to relevant columns
select(categorie_names) %>%
tbl_transpose() %>%
mutate(
baseline = V1,
categorie = categorie_names,
.keep = "unused"
) %>%
merge(range_offsets, by = "categorie", all.x = T) %>%
# calculate similarity-borders
mutate(
## resembling-similiarity-range
# left border
resembling_left = case_when(
offset_type == "add" ~ baseline - resembling_offset,
offset_type == "multi" ~ baseline * (1 - resembling_offset)
),
# right border
resembling_right = case_when(
offset_type == "add" ~ baseline + resembling_offset,
offset_type == "multi" ~ baseline * (1 + resembling_offset)
),
## exact-similiarity-range
# left border
exact_left = case_when(
offset_type == "add" ~ baseline - exact_offset,
offset_type == "multi" ~ baseline * (1 - exact_offset)
),
# right border
exact_right = case_when(
offset_type == "add" ~ baseline + exact_offset,
offset_type == "multi" ~ baseline * (1 + exact_offset)
),
.keep = "unused"
)
## calculate repeated ids
repeated_id <- similiarity_range %>%
# columnwise checks if .data values are within borders of similiarity-ranges
# can be thought of as an extend version of dpylr::between()
summarise(
across(
# only consider non-border values
starts_with("V"),
~ case_when(
# value is within exact-similarity-range
. >= exact_left & exact_right >= . ~ 1,
# value is within resembling-similiarity-range
. >= resembling_left & resembling_right >= . ~ 0,
# value is not within either border
TRUE ~ -1
)
)
) %>%
# columnwise checks for repeated criteria
summarise(
across(
# only consider non-border values
starts_with("V"),
~ case_when(
# atleast one values is outside of the bounds of similarity-ranges
# ~ non repeated offering
-1 %in% . ~ -1,
# all values are atleast within similiar borders
# ~ resembling repeated offering
0 %in% . ~ 0,
# all values are within exact borders
# ~ true repeated offering
TRUE ~ 1
)
)
)
View(repeated_id)
categorie_names <- range_offsets$categorie[!range_offsets$categorie == "time"]
## calculate similarity-ranges of potential parent
similiarity_range = .data %>%
# reduce data to relevant columns
select(categorie_names) %>%
tbl_transpose() %>%
mutate(
baseline = V1,
categorie = categorie_names,
.keep = "unused"
) %>%
merge(range_offsets, by = "categorie", all.x = T) %>%
# calculate similarity-borders
mutate(
## resembling-similiarity-range
# left border
resembling_left = case_when(
offset_type == "add" ~ baseline - resembling_offset,
offset_type == "multi" ~ baseline * (1 - resembling_offset)
),
# right border
resembling_right = case_when(
offset_type == "add" ~ baseline + resembling_offset,
offset_type == "multi" ~ baseline * (1 + resembling_offset)
),
## exact-similiarity-range
# left border
exact_left = case_when(
offset_type == "add" ~ baseline - exact_offset,
offset_type == "multi" ~ baseline * (1 - exact_offset)
),
# right border
exact_right = case_when(
offset_type == "add" ~ baseline + exact_offset,
offset_type == "multi" ~ baseline * (1 + exact_offset)
),
.keep = "unused"
)
## calculate repeated ids
repeated_id <- similiarity_range %>%
# columnwise checks if .data values are within borders of similiarity-ranges
# can be thought of as an extend version of dpylr::between()
summarise(
across(
# only consider non-border values
starts_with("V"),
~ case_when(
# value is within exact-similarity-range
. >= exact_left & exact_right >= . ~ 1,
# value is within resembling-similiarity-range
. >= resembling_left & resembling_right >= . ~ 0,
# value is not within either border
TRUE ~ -1
)
)
) %>%
# columnwise checks for repeated criteria
summarise(
across(
# only consider non-border values
starts_with("V"),
~ case_when(
# atleast one values is outside of the bounds of similarity-ranges
# ~ non repeated offering
-1 %in% . ~ -1,
# all values are atleast within similiar borders
# ~ resembling repeated offering
0 %in% . ~ 0,
# all values are within exact borders
# ~ true repeated offering
TRUE ~ 1
)
)
) %>%
# transpose
tbl_transpose()
View(repeated_id)
similarity <- similiarity_range %>%
# transpose
tbl_transpose() %>%
## convert each .data column into fitting type
# flexibly convert numeric input stored as character values
# into actual numeric values
summarise(
across(
everything(),
~ type.convert(.x, as.is = T)
)
) %>%
# calculate similarity index
mutate(
similarity_index(.)
) %>%
# extract index values
pull()
similiarity_range %>%
# transpose
tbl_transpose()
similiarity_range %>%
# transpose
tbl_transpose() %>%
## convert each .data column into fitting type
# flexibly convert numeric input stored as character values
# into actual numeric values
summarise(
across(
everything(),
~ type.convert(.x, as.is = T)
)
)
View(similiarity_range)
?merge
