"1990-1999",
"2000-2009",
">2010"
)
)
}), .SDcols = c("baujahr", "letzte_modernisierung")]
RED_classified$baujahr_cat
RED_classified$objektzustand
unique(RED_classified$objektzustand)
rep_len(TRUE, length(RED_classified$schlafzimmer))
#
#
# ### number of bedrooms ----
RED_classified[schlafzimmer >= 7, schlafzimmer := 7][,schlafzimmer := factor(
schlafzimmer,
0:7,
c(NA_character_, 1:6, "7+")
)]
RED_classified$schlafzimmer
styler:::style_active_file()
styler:::style_active_file()
styler:::style_selection()
styler:::style_active_file()
styler:::style_active_file()
styler:::style_active_file()
styler:::style_active_file()
styler:::style_active_file()
summary(RED_classified$ausstattung)
# replace missing with zero
RED_classified[.SD < 0, .SD := 0, .SDcols = var_to_replace_missings]
styler:::style_active_file()
styler:::style_active_file()
styler:::style_active_file()
styler:::style_active_file()
styler:::style_active_file()
styler:::style_active_file()
all_type_cleaning <- function(RED_classified = NA, var_to_replace_missings = NA) {
# replace missing with zero
RED_classified[.SD < 0, .SD := 0, .SDcols = var_to_replace_missings][, .SD := as.factor(.SD), .SDcols = var_to_replace_missings]
# baujahr + modernisierung ------------------------------------------------
# redefine baujahr and letzte_modernisierung
RED_classified[,
c("baujahr_cat", "modernisierung_cat") := lapply(.SD, function(x) {
# sort into categories
fcase(
x <= 0, 0,
x < 1900, 1,
between(x, 1900, 1945), 2,
between(x, 1946, 1959), 3,
between(x, 1960, 1969), 4,
between(x, 1970, 1979), 5,
between(x, 1980, 1989), 6,
between(x, 1990, 1999), 7,
between(x, 2000, 2009), 8,
x > 2010, 9
) |>
# label said categories
factor(
levels = 0:9,
labels = c(
NA_character_,
"<1900",
"1900-1945",
"1946-1959",
"1960-1969",
"1970-1979",
"1980-1989",
"1990-1999",
"2000-2009",
">2010"
)
)
}),
.SDcols = c("baujahr", "letzte_modernisierung")
]
# objektzustand -----------------------------------------------------------
RED_classified[
,
objektzustand := fifelse(
objektzustand == 1, "Yes", "No"
)
]
# ausstattung -------------------------------------------------------------
RED_classified[
,
ausstattung := factor(
ausstattung,
0:4,
c(NA_character_, "Simple", "Normal", "Sophisticated", "Deluxe")
)
]
# etagen ------------------------------------------------------------
# anzahletagen
RED_classified[
,
num_floors := fcase(
anzahletage <= 0, 0,
between(anzahletagen, 1, 3), 1,
between(anzahletagen, 4, 5), 2,
between(anzahletagen, 6, 10), 3,
anzahletage > 10, 4
) |> factor(
0:4,
c(
NA_character_,
"1-3 floors",
"4-5 floors",
"6-10 floors",
"more than 10 floors"
)
)
]
# etagen
RED_classified[
,
cat_floors := fcase(
etage <= 0, 0,
etage == 1, 1,
between(etage, 2, 3), 2,
between(etage, 4, 5), 3,
between(etage, 6, 10), 4,
anzahletage > 10, 5
) |> factor(
0:5,
c(
NA_character_,
"ground floor (UG)",
"first floor (EG)",
"2nd to 3rd floor",
"4th to 5th floor",
"6th to 10th floor",
"above 10th floor"
)
)
]
# wohngeld ----------------------------------------------------------------
RED_classified[
,
wohngeld := fifelse(between(wohngeld, 0, 2500), "Yes", "No")
]
return(RED_classified)
}
RED_cleaned = all_type_cleaning(
RED_classified,
var_to_replace_missings = c(
"balkon",
"garten",
"einbaukueche",
"gaestewc",
"aufzug",
"keller",
"ausstattung",
"betreut"
)
)
styler:::style_active_file()
styler:::style_active_file()
all_type_cleaning <- function(RED_classified = NA, var_to_replace_missings = NA) {
RED_classified[
# replace missing with zero
.(var_to_replace_missings) < 0,
.(var_to_replace_missings) := 0,
.SDcols = var_to_replace_missings
][
# make non-missings factors
, .SD := as.factor(.SD),
.SDcols = var_to_replace_missings
]
# baujahr + modernisierung ------------------------------------------------
# redefine baujahr and letzte_modernisierung
RED_classified[,
c("baujahr_cat", "modernisierung_cat") := lapply(.SD, function(x) {
# sort into categories
fcase(
x <= 0, 0,
x < 1900, 1,
between(x, 1900, 1945), 2,
between(x, 1946, 1959), 3,
between(x, 1960, 1969), 4,
between(x, 1970, 1979), 5,
between(x, 1980, 1989), 6,
between(x, 1990, 1999), 7,
between(x, 2000, 2009), 8,
x > 2010, 9
) |>
# label said categories
factor(
levels = 0:9,
labels = c(
NA_character_,
"<1900",
"1900-1945",
"1946-1959",
"1960-1969",
"1970-1979",
"1980-1989",
"1990-1999",
"2000-2009",
">2010"
)
)
}),
.SDcols = c("baujahr", "letzte_modernisierung")
]
# objektzustand -----------------------------------------------------------
RED_classified[
,
objektzustand := fifelse(
objektzustand == 1, "Yes", "No"
)
]
# ausstattung -------------------------------------------------------------
RED_classified[
,
ausstattung := factor(
ausstattung,
0:4,
c(NA_character_, "Simple", "Normal", "Sophisticated", "Deluxe")
)
]
# etagen ------------------------------------------------------------
# anzahletagen
RED_classified[
,
num_floors := fcase(
anzahletage <= 0, 0,
between(anzahletagen, 1, 3), 1,
between(anzahletagen, 4, 5), 2,
between(anzahletagen, 6, 10), 3,
anzahletage > 10, 4
) |> factor(
0:4,
c(
NA_character_,
"1-3 floors",
"4-5 floors",
"6-10 floors",
"more than 10 floors"
)
)
]
# etagen
RED_classified[
,
cat_floors := fcase(
etage <= 0, 0,
etage == 1, 1,
between(etage, 2, 3), 2,
between(etage, 4, 5), 3,
between(etage, 6, 10), 4,
anzahletage > 10, 5
) |> factor(
0:5,
c(
NA_character_,
"ground floor (UG)",
"first floor (EG)",
"2nd to 3rd floor",
"4th to 5th floor",
"6th to 10th floor",
"above 10th floor"
)
)
]
# wohngeld ----------------------------------------------------------------
RED_classified[
,
wohngeld := fifelse(between(wohngeld, 0, 2500), "Yes", "No")
]
return(RED_classified)
}
RED_cleaned = all_type_cleaning(
RED_classified,
var_to_replace_missings = c(
"balkon",
"garten",
"einbaukueche",
"gaestewc",
"aufzug",
"keller",
"ausstattung",
"betreut"
)
)
all_type_cleaning <- function(RED_classified = NA, var_to_replace_missings = NA) {
RED_classified[
# replace missing with zero
(var_to_replace_missings) < 0,
(var_to_replace_missings) := 0
][
# make non-missings factors
, (var_to_replace_missings):= as.factor(var_to_replace_missings)
]
# baujahr + modernisierung ------------------------------------------------
# redefine baujahr and letzte_modernisierung
RED_classified[,
c("baujahr_cat", "modernisierung_cat") := lapply(.SD, function(x) {
# sort into categories
fcase(
x <= 0, 0,
x < 1900, 1,
between(x, 1900, 1945), 2,
between(x, 1946, 1959), 3,
between(x, 1960, 1969), 4,
between(x, 1970, 1979), 5,
between(x, 1980, 1989), 6,
between(x, 1990, 1999), 7,
between(x, 2000, 2009), 8,
x > 2010, 9
) |>
# label said categories
factor(
levels = 0:9,
labels = c(
NA_character_,
"<1900",
"1900-1945",
"1946-1959",
"1960-1969",
"1970-1979",
"1980-1989",
"1990-1999",
"2000-2009",
">2010"
)
)
}),
.SDcols = c("baujahr", "letzte_modernisierung")
]
# objektzustand -----------------------------------------------------------
RED_classified[
,
objektzustand := fifelse(
objektzustand == 1, "Yes", "No"
)
]
# ausstattung -------------------------------------------------------------
RED_classified[
,
ausstattung := factor(
ausstattung,
0:4,
c(NA_character_, "Simple", "Normal", "Sophisticated", "Deluxe")
)
]
# etagen ------------------------------------------------------------
# anzahletagen
RED_classified[
,
num_floors := fcase(
anzahletage <= 0, 0,
between(anzahletagen, 1, 3), 1,
between(anzahletagen, 4, 5), 2,
between(anzahletagen, 6, 10), 3,
anzahletage > 10, 4
) |> factor(
0:4,
c(
NA_character_,
"1-3 floors",
"4-5 floors",
"6-10 floors",
"more than 10 floors"
)
)
]
# etagen
RED_classified[
,
cat_floors := fcase(
etage <= 0, 0,
etage == 1, 1,
between(etage, 2, 3), 2,
between(etage, 4, 5), 3,
between(etage, 6, 10), 4,
anzahletage > 10, 5
) |> factor(
0:5,
c(
NA_character_,
"ground floor (UG)",
"first floor (EG)",
"2nd to 3rd floor",
"4th to 5th floor",
"6th to 10th floor",
"above 10th floor"
)
)
]
# wohngeld ----------------------------------------------------------------
RED_classified[
,
wohngeld := fifelse(between(wohngeld, 0, 2500), "Yes", "No")
]
return(RED_classified)
}
RED_cleaned = all_type_cleaning(
RED_classified,
var_to_replace_missings = c(
"balkon",
"garten",
"einbaukueche",
"gaestewc",
"aufzug",
"keller",
"ausstattung",
"betreut"
)
)
RED_classified[
# replace missing with zero
(var_to_replace_missings) < 0,
(var_to_replace_missings) := 0,
]
var_to_replace_missings = c(
"balkon",
"garten",
"einbaukueche",
"gaestewc",
"aufzug",
"keller",
"ausstattung",
"betreut"
)
RED_classified[
# replace missing with zero
(var_to_replace_missings) < 0,
(var_to_replace_missings) := 0,
]
RED_classified[
# replace missing with zero
.(var_to_replace_missings) < 0,
.(var_to_replace_missings) := 0,
]
RED_classified[
# replace missing with zero
(var_to_replace_missings) < 0,
(var_to_replace_missings) := 0
]
RED_classified[
# replace missing with zero
(var_to_replace_missings) < 0,
(var_to_replace_missings) := 0,
.SDcols = var_to_replace_missings
]
RED_classified[
# replace missing with zero
(.SD) < 0,
(.SD) := 0,
.SDcols = var_to_replace_missings
]
RED_classified[
# replace missing with zero
.(.SD) < 0,
.(.SD) := 0,
.SDcols = var_to_replace_missings
]
RED_classified[
# replace missing with zero
list(.SD) < 0,
list(.SD) := 0,
.SDcols = var_to_replace_missings
]
RED_classified[
# replace missing with zero
.SD < 0,
.SD := 0,
.SDcols = var_to_replace_missings
]
[
# make non-missings factors
, (var_to_replace_missings):= as.factor(var_to_replace_missings)
]
RED_classified[
# replace missing with zero
c(.SD) < 0,
.SD := 0,
.SDcols = var_to_replace_missings
]
head(RED_classified)
RED_classified[
# replace missing with zero
(.SD) < 0,
(.SD) := 0,
.SDcols = var_to_replace_missings
]
RED_classified[
# replace missing with zero
(var_to_replace_missings) < 0,
(var_to_replace_missings) := 0,
.SDcols = var_to_replace_missings
]
(var_to_replace_missings) < 0
RED_classified[
# replace missing with zero
.(var_to_replace_missings) < 0,
(var_to_replace_missings) := 0,
.SDcols = var_to_replace_missings
]
?set
col_to_replace = var_to_replace_missings[1]
set(RED_classified,
i = col_to_replace < 0,
j = col_to_replace,
value = 0
)
col_to_replace < 0
RED_classified[, lapply(.SD, function(x) fifelse(x<0, 0,x) |> as.factor() ), .SDcols = var_to_replace_missings]
RED_classified[, lapply(.SD, function(x) as.factor(fifelse(x<0, 0,x)) ), .SDcols = var_to_replace_missings]
RED_classified[, lapply(.SD, function(x) fifelse(x<0, 0,x)), .SDcols = var_to_replace_missings]
RED_classified[, lapply(.SD, fifelse(.SD<0, 0,.SD)), .SDcols = var_to_replace_missings]
base::gc()
