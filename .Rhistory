self$sim_dist = rbind(self$sim_dist,  self$distance[self$max_ss,self$subset, with = F])
self$counting_ids = rbind(self$counting_ids, as.numeric(names(cluster_option)))
self$parents = rbind(self$centers, self$var_names[self$max_ss])
}
}
)
)
clustering <- cluster$new(
options = similarity_index_list,
distance = similarity_dist_list,
means = rowMeans(similarity_index_list * similarity_dist_list, na.rm = T)
)
clustering <- cluster$new(
options = similarity_index_list,
distance = similarity_dist_list,
means = rowMeans(similarity_index_list * similarity_dist_list, na.rm = T)
)
cluster
debugSource("N:/FDZ/Intern/HiWi-Praktikanten/Mitarbeiter/Thorben/repeated offerings/R/removal_new.R")
View(self)
as.numeric(names(cluster_option)
)
c(self$counting_ids, as.numeric(names(cluster_option)))
rbind(self$counting_ids, as.numeric(names(cluster_option)))
rbind(self$centers, self$var_names[self$max_ss])
#' @title WIP
#'
#' @description WIP
#' @param WIP
#' @param WIP
#' @note
#'
#' @return WIP
#' @author Thorben Wiebe
#----------------------------------------------
cluster = R6::R6Class("cluster",
public = list(
options = NULL,
distance = NULL,
means = NULL,
sim_dist = NULL,
sequence = NULL,
var_names = NULL,
subset = NULL,
max_ss = NULL,
centers = NULL,
initialize = function(options = NULL,
distance = NULL,
means = NULL,
var_names = NULL,
sim_dist = data.table(),
sequence = NULL,
subset = NULL,
max_ss = NULL,
centers = data.table()) {
self$options <-  unique(apply(!is.na(options),1,which))
self$distance = distance
self$means = means
self$sequence = seq_along(self$means)
self$var_names = attr(self$options |> unlist(),"names")
},
determine_cluster_centers = function(){
for(cluster_option in self$options){
self$subset = self$sequence[self$var_names %in% names(cluster_option)]
self$max_ss = self$subset[which.min(self$means[self$subset])]
self$sim_dist = rbind(self$sim_dist,  self$distance[self$max_ss,self$subset, with = F])
temp = data.table(
"counting_ids" = as.numeric(names(cluster_option)),
"parent" = self$var_names[self$max_ss]
)
self$centers = rbind(self$centers, temp)
}
}
)
)
clustering <- cluster$new(
options = similarity_index_list,
distance = similarity_dist_list,
means = rowMeans(similarity_index_list * similarity_dist_list, na.rm = T)
)
clustering$determine_cluster_centers()
debugSource("N:/FDZ/Intern/HiWi-Praktikanten/Mitarbeiter/Thorben/repeated offerings/R/removal_new.R")
View(self)
View(temp)
temp2 = self$distance[self$max_ss,self$subset, with = F]
#' @title WIP
#'
#' @description WIP
#' @param WIP
#' @param WIP
#' @note
#'
#' @return WIP
#' @author Thorben Wiebe
#----------------------------------------------
cluster = R6::R6Class("cluster",
public = list(
options = NULL,
distance = NULL,
means = NULL,
sim_dist = NULL,
sequence = NULL,
var_names = NULL,
subset = NULL,
max_ss = NULL,
centers = NULL,
initialize = function(options = NULL,
distance = NULL,
means = NULL,
var_names = NULL,
sim_dist = data.table(),
sequence = NULL,
subset = NULL,
max_ss = NULL,
centers = data.table()) {
self$options <-  unique(apply(!is.na(options),1,which))
self$distance = distance
self$means = means
self$sequence = seq_along(self$means)
self$var_names = attr(self$options |> unlist(),"names")
},
determine_cluster_centers = function(){
for(cluster_option in self$options){
self$subset = self$sequence[self$var_names %in% names(cluster_option)]
self$max_ss = self$subset[which.min(self$means[self$subset])]
temp2 = self$distance[self$max_ss,self$subset, with = F]
self$sim_dist = rbind(self$sim_dist, t(temp2))
temp = data.table(
"counting_ids" = as.numeric(names(cluster_option)),
"parent" = self$var_names[self$max_ss]
)
self$centers = rbind(self$centers, temp)
}
}
)
)
clustering <- cluster$new(
options = similarity_index_list,
distance = similarity_dist_list,
means = rowMeans(similarity_index_list * similarity_dist_list, na.rm = T)
)
clustering$determine_cluster_centers()
clustering$centers
clustering$sim_dist
#' @title WIP
#'
#' @description WIP
#' @param WIP
#' @param WIP
#' @note
#'
#' @return WIP
#' @author Thorben Wiebe
#----------------------------------------------
cluster = R6::R6Class("cluster",
public = list(
options = NULL,
distance = NULL,
means = NULL,
sim_dist = NULL,
sequence = NULL,
var_names = NULL,
subset = NULL,
max_ss = NULL,
centers = NULL,
initialize = function(options = NULL,
distance = NULL,
means = NULL,
var_names = NULL,
sim_dist = data.table(),
sequence = NULL,
subset = NULL,
max_ss = NULL,
centers = data.table()) {
self$options <-  unique(apply(!is.na(options),1,which))
self$distance = distance
self$means = means
self$sequence = seq_along(self$means)
self$var_names = attr(self$options |> unlist(),"names")
},
determine_cluster_centers = function(){
for(cluster_option in self$options){
self$subset = self$sequence[self$var_names %in% names(cluster_option)]
self$max_ss = self$subset[which.min(self$means[self$subset])]
temp2 = data.table(
"counting_ids" = as.numeric(names(cluster_option)),
"sim_dist" = self$distance[self$max_ss,self$subset, with = F]
)
self$sim_dist = rbind(self$sim_dist, t(temp2))
temp = data.table(
"counting_ids" = as.numeric(names(cluster_option)),
"parent" = self$var_names[self$max_ss]
)
self$centers = rbind(self$centers, temp)
}
}
)
)
clustering <- cluster$new(
options = similarity_index_list,
distance = similarity_dist_list,
means = rowMeans(similarity_index_list * similarity_dist_list, na.rm = T)
)
clustering$determine_cluster_centers()
#' @title WIP
#'
#' @description WIP
#' @param WIP
#' @param WIP
#' @note
#'
#' @return WIP
#' @author Thorben Wiebe
#----------------------------------------------
cluster = R6::R6Class("cluster",
public = list(
options = NULL,
distance = NULL,
means = NULL,
sim_dist = NULL,
sequence = NULL,
var_names = NULL,
subset = NULL,
max_ss = NULL,
centers = NULL,
initialize = function(options = NULL,
distance = NULL,
means = NULL,
var_names = NULL,
sim_dist = data.table(),
sequence = NULL,
subset = NULL,
max_ss = NULL,
centers = data.table()) {
self$options <-  unique(apply(!is.na(options),1,which))
self$distance = distance
self$means = means
self$sequence = seq_along(self$means)
self$var_names = attr(self$options |> unlist(),"names")
},
determine_cluster_centers = function(){
for(cluster_option in self$options){
self$subset = self$sequence[self$var_names %in% names(cluster_option)]
self$max_ss = self$subset[which.min(self$means[self$subset])]
temp2 = data.table(
"sim_dist" = self$distance[self$max_ss,self$subset, with = F]
)
self$sim_dist = rbind(self$sim_dist, t(temp2))
temp = data.table(
"counting_ids" = as.numeric(names(cluster_option)),
"parent" = self$var_names[self$max_ss]
)
self$centers = rbind(self$centers, temp)
}
}
)
)
clustering <- cluster$new(
options = similarity_index_list,
distance = similarity_dist_list,
means = rowMeans(similarity_index_list * similarity_dist_list, na.rm = T)
)
clustering$determine_cluster_centers()
clustering$centers
clustering$sim_dist
#' @title WIP
#'
#' @description WIP
#' @param WIP
#' @param WIP
#' @note
#'
#' @return WIP
#' @author Thorben Wiebe
#----------------------------------------------
cluster = R6::R6Class("cluster",
public = list(
options = NULL,
distance = NULL,
means = NULL,
sim_dist = NULL,
sequence = NULL,
var_names = NULL,
subset = NULL,
max_ss = NULL,
centers = NULL,
initialize = function(options = NULL,
distance = NULL,
means = NULL,
var_names = NULL,
sim_dist = data.table(),
sequence = NULL,
subset = NULL,
max_ss = NULL,
centers = data.table()) {
self$options <-  unique(apply(!is.na(options),1,which))
self$distance = distance
self$means = means
self$sequence = seq_along(self$means)
self$var_names = attr(self$options |> unlist(),"names")
},
determine_cluster_centers = function(){
for(cluster_option in self$options){
self$subset = self$sequence[self$var_names %in% names(cluster_option)]
self$max_ss = self$subset[which.min(self$means[self$subset])]
temp2 = data.table(
"sim_dist" = self$distance[self$max_ss,self$subset, with = F]
)
self$sim_dist = rbind(self$sim_dist, t(temp2))
temp = data.table(
"counting_ids" = as.numeric(names(cluster_option)),
"parent" = self$var_names[self$max_ss]
)
self$centers = rbind(self$centers, temp)
return(c(self$centers,self$sim_dist))
}
}
)
)
clustering <- cluster$new(
options = similarity_index_list,
distance = similarity_dist_list,
means = rowMeans(similarity_index_list * similarity_dist_list, na.rm = T)
)
clustering$determine_cluster_centers()
#' @title WIP
#'
#' @description WIP
#' @param WIP
#' @param WIP
#' @note
#'
#' @return WIP
#' @author Thorben Wiebe
#----------------------------------------------
cluster = R6::R6Class("cluster",
public = list(
options = NULL,
distance = NULL,
means = NULL,
sim_dist = NULL,
sequence = NULL,
var_names = NULL,
subset = NULL,
max_ss = NULL,
centers = NULL,
initialize = function(options = NULL,
distance = NULL,
means = NULL,
var_names = NULL,
sim_dist = data.table(),
sequence = NULL,
subset = NULL,
max_ss = NULL,
centers = data.table()) {
self$options <-  unique(apply(!is.na(options),1,which))
self$distance = distance
self$means = means
self$sequence = seq_along(self$means)
self$var_names = attr(self$options |> unlist(),"names")
},
determine_cluster_centers = function(){
for(cluster_option in self$options){
self$subset = self$sequence[self$var_names %in% names(cluster_option)]
self$max_ss = self$subset[which.min(self$means[self$subset])]
temp2 = data.table(
"sim_dist" = self$distance[self$max_ss,self$subset, with = F]
)
self$sim_dist = rbind(self$sim_dist, t(temp2))
temp = data.table(
"counting_ids" = as.numeric(names(cluster_option)),
"parent" = self$var_names[self$max_ss]
)
self$centers = rbind(self$centers, temp)
}
self$df = c(self$centers,self$sim_dist)
}
)
)
clustering <- cluster$new(
options = similarity_index_list,
distance = similarity_dist_list,
means = rowMeans(similarity_index_list * similarity_dist_list, na.rm = T)
)
clustering$determine_cluster_centers()
#' @title WIP
#'
#' @description WIP
#' @param WIP
#' @param WIP
#' @note
#'
#' @return WIP
#' @author Thorben Wiebe
#----------------------------------------------
cluster = R6::R6Class("cluster",
public = list(
options = NULL,
distance = NULL,
df = NULL,
means = NULL,
sim_dist = NULL,
sequence = NULL,
var_names = NULL,
subset = NULL,
max_ss = NULL,
centers = NULL,
initialize = function(options = NULL,
distance = NULL,
means = NULL,
var_names = NULL,
df = NULL,
sim_dist = data.table(),
sequence = NULL,
subset = NULL,
max_ss = NULL,
centers = data.table()) {
self$options <-  unique(apply(!is.na(options),1,which))
self$distance = distance
self$means = means
self$sequence = seq_along(self$means)
self$var_names = attr(self$options |> unlist(),"names")
},
determine_cluster_centers = function(){
for(cluster_option in self$options){
self$subset = self$sequence[self$var_names %in% names(cluster_option)]
self$max_ss = self$subset[which.min(self$means[self$subset])]
temp2 = data.table(
"sim_dist" = self$distance[self$max_ss,self$subset, with = F]
)
self$sim_dist = rbind(self$sim_dist, t(temp2))
temp = data.table(
"counting_ids" = as.numeric(names(cluster_option)),
"parent" = self$var_names[self$max_ss]
)
self$centers = rbind(self$centers, temp)
}
self$df = c(self$centers,self$sim_dist)
}
)
)
clustering <- cluster$new(
options = similarity_index_list,
distance = similarity_dist_list,
means = rowMeans(similarity_index_list * similarity_dist_list, na.rm = T)
)
cluster
clustering$determine_cluster_centers()
clustering$df
clustering$sim_dist
clustering$centers
#' @title WIP
#'
#' @description WIP
#' @param WIP
#' @param WIP
#' @note
#'
#' @return WIP
#' @author Thorben Wiebe
#----------------------------------------------
cluster = R6::R6Class("cluster",
public = list(
options = NULL,
distance = NULL,
means = NULL,
sim_dist = NULL,
sequence = NULL,
var_names = NULL,
subset = NULL,
max_ss = NULL,
centers = NULL,
initialize = function(options = NULL,
distance = NULL,
means = NULL,
var_names = NULL,
sim_dist = data.table(),
sequence = NULL,
subset = NULL,
max_ss = NULL,
centers = data.table()) {
self$options <-  unique(apply(!is.na(options),1,which))
self$distance = distance
self$means = means
self$sequence = seq_along(self$means)
self$var_names = attr(self$options |> unlist(),"names")
},
determine_cluster_centers = function(){
for(cluster_option in self$options){
self$subset = self$sequence[self$var_names %in% names(cluster_option)]
self$max_ss = self$subset[which.min(self$means[self$subset])]
temp2 = data.table(
"sim_dist" = self$distance[self$max_ss,self$subset, with = F]
)
self$sim_dist = rbind(self$sim_dist, t(temp2))
temp = data.table(
"counting_ids" = as.numeric(names(cluster_option)),
"parent" = self$var_names[self$max_ss]
)
self$centers = rbind(self$centers, temp)
}
self$centers$sim_dist = self$sim_dist
}
)
)
clustering <- cluster$new(
options = similarity_index_list,
distance = similarity_dist_list,
means = rowMeans(similarity_index_list * similarity_dist_list, na.rm = T)
)
clustering$determine_cluster_centers()
clustering$centers
