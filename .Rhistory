# this pretty much allows for duplicate indiviudal listings between pure/changed
# sample 1 pure rs
pure_pairs = pure_rs[changed_to == FALSE | changed_from == FALSE]
# sample 2 quality changed rs
changed_pairs = pure_rs[changed_to == TRUE | changed_from == TRUE]
# smaple 3 hedonic
hedonic_listings = RED_classified[hybrid_type == "hedonic", ..var_to_keep]
# type specific setups, mostly for readability
# this is incredibly ugly, refactor it later
# hedonic
hedonic_V = hedonic_listings[["depVar"]]
hedonic_t_month = hedonic_listings[["emonths"]]
hedonic_counting_id = hedonic_listings[["counting_id"]]
# pure
pure_V_t = pure_pairs[["depVar"]]
pure_V_T = pure_pairs[,lag(depVar,1), by = "rs_id"][,rs_id := NULL][["V1"]]
pure_t_month = pure_pairs[["emonths"]]
pure_T_month = pure_pairs[,lag(emonths,1), by = "rs_id"][,rs_id := NULL][["V1"]]
pure_counting_id = pure_pairs[["counting_id"]]
# changed
changed_V_t = changed_pairs[["depVar"]]
changed_V_T = changed_pairs[,lag(depVar,1), by = "rs_id"][,rs_id := NULL][["V1"]]
changed_t_month = changed_pairs[["emonths"]]
changed_T_month = changed_pairs[,lag(emonths,1), by = "rs_id"][,rs_id := NULL][["V1"]]
changed_counting_id = changed_pairs[["counting_id"]]
Z = do.call(rbind, list(
# hedonic
X_1 = make_X_1(hedonic = hedonic_listings, x_conts = cont_names, x_binaries = binary_names, t_month = hedonic_t_month),
# pure
X_2 = make_X_2(pure = pure_pairs, x_conts = cont_names, x_binaries = binary_names, t_month = pure_t_month, T_month = pure_T_month),
# changed
X_3 = make_X_3(
changed = changed_pairs,
x_conts = cont_names,
x_binaries = binary_names,
t_month = changed_t_month,
T_month = changed_T_month
)
))
Y = log(
c(
hedonic_V,
(pure_V_t/pure_V_T),
(changed_V_t/changed_V_T)
)
)
combined_hybrid = cbind(Z,Y)[,counting_id := c(hedonic_counting_id, pure_counting_id, changed_counting_id)] |> na.omit()
# final clean up -> these shouldnt really happend beforehand
combined_hybrid = combined_hybrid[pre_zimmeranzahl != -Inf & sub_zimmeranzahl != -Inf & Y > 0]
f <- sprintf("%s ~ %s",
"Y",
names(Z) |> paste(collapse = " + ")
) |> as.formula()
hybrid_regression = feols(f, combined_hybrid, combine.quick = F, mem.clean = T)
prepare_hedonic = WK_prepared_repeated
list_var = make_var(data_type = data_type)
indepVar = list_var$indepVar
depVar = list_var$depVar
# think of a solution for this, they are mutated in prepare_hedonic
var_to_keep = c(indepVar,"rs_id","emonths","depVar","rs_id","counting_id")
# one consideration is that we have to decide between using or dropping updates from hedonic as well
# build by me based on Case and Quigley 1991
# get ids of all listings that are classified as repeat sales (pure or changed)
all_rs = prepared_repeated[["rs_id"]] |> unique()
# split into repeat and hedonic
RED_classified = prepare_hedonic(RED_classified, data_type)[,":="(
hybrid_type = fifelse(rs_id %in% all_rs, "repeat", "hedonic"),
depVar = exp(get(depVar))
)
]
# to split repeat into pure and changed, figure out which listings have changed within id
# this means however that between pairs quality changed, so for that listing pair
# reduce listings to only repeats and set missings to zero
pure_rs = RED_classified[
hybrid_type == "repeat",
..var_to_keep
]
changed_boolean = pure_rs[,
lapply(.SD, function(x){c(NA,diff(x))}),
by = rs_id,
.SDcols = setdiff(var_to_keep,c("rs_id","emonths","depVar","counting_id"))
][,rs_id := NULL] |> rowSums() != 0
is.na(changed_boolean) = FALSE
tar_assert_true(length(changed_boolean) == nrow(pure_rs))
pure_rs[, changed_to := changed_boolean][, changed_from := lead(changed_to,1), by = rs_id]
binary_names = c("balkon","garten","einbaukueche","gaestewc","aufzug","keller","betreut","ausstattung","declared_wohngeld", "baujahr_cat", "first_occupancy", "num_floors", "floors_cat")
cont_names = c("zimmeranzahl")
# this pretty much allows for duplicate indiviudal listings between pure/changed
# sample 1 pure rs
pure_pairs = pure_rs[changed_to == FALSE | changed_from == FALSE]
# sample 2 quality changed rs
changed_pairs = pure_rs[changed_to == TRUE | changed_from == TRUE]
# smaple 3 hedonic
hedonic_listings = RED_classified[hybrid_type == "hedonic", ..var_to_keep]
# type specific setups, mostly for readability
# this is incredibly ugly, refactor it later
# hedonic
hedonic_V = hedonic_listings[["depVar"]]
hedonic_t_month = hedonic_listings[["emonths"]]
hedonic_counting_id = hedonic_listings[["counting_id"]]
# pure
pure_V_t = pure_pairs[["depVar"]]
pure_V_T = pure_pairs[,lag(depVar,1), by = "rs_id"][,rs_id := NULL][["V1"]]
pure_t_month = pure_pairs[["emonths"]]
pure_T_month = pure_pairs[,lag(emonths,1), by = "rs_id"][,rs_id := NULL][["V1"]]
pure_counting_id = pure_pairs[["counting_id"]]
# changed
changed_V_t = changed_pairs[["depVar"]]
changed_V_T = changed_pairs[,lag(depVar,1), by = "rs_id"][,rs_id := NULL][["V1"]]
changed_t_month = changed_pairs[["emonths"]]
changed_T_month = changed_pairs[,lag(emonths,1), by = "rs_id"][,rs_id := NULL][["V1"]]
changed_counting_id = changed_pairs[["counting_id"]]
Z = do.call(rbind, list(
# hedonic
X_1 = make_X_1(hedonic = hedonic_listings, x_conts = cont_names, x_binaries = binary_names, t_month = hedonic_t_month),
# pure
X_2 = make_X_2(pure = pure_pairs, x_conts = cont_names, x_binaries = binary_names, t_month = pure_t_month, T_month = pure_T_month),
# changed
X_3 = make_X_3(
changed = changed_pairs,
x_conts = cont_names,
x_binaries = binary_names,
t_month = changed_t_month,
T_month = changed_T_month
)
))
Y = log(
c(
hedonic_V,
(pure_V_t/pure_V_T),
(changed_V_t/changed_V_T)
)
)
combined_hybrid = cbind(Z,Y)[,counting_id := c(hedonic_counting_id, pure_counting_id, changed_counting_id)] |> na.omit()
# final clean up -> these shouldnt really happend beforehand
combined_hybrid = combined_hybrid[pre_zimmeranzahl != -Inf & sub_zimmeranzahl != -Inf & Y > 0]
f <- sprintf("%s ~ %s",
"Y",
names(Z) |> paste(collapse = " + ")
) |> as.formula()
hybrid_regression = feols(f, combined_hybrid, combine.quick = F, mem.clean = T)
list_var = make_var(data_type = data_type)
indepVar = list_var$indepVar
depVar = list_var$depVar
# think of a solution for this, they are mutated in prepare_hedonic
var_to_keep = c(indepVar,"rs_id","emonths","depVar","rs_id","counting_id")
# build by me based on Case and Quigley 1991
# get ids of all listings that are classified as repeat sales (pure or changed)
all_rs = prepared_repeated[["rs_id"]] |> unique()
prepared_repeated = WK_prepared_repeated
# build by me based on Case and Quigley 1991
# get ids of all listings that are classified as repeat sales (pure or changed)
all_rs = prepared_repeated[["rs_id"]] |> unique()
# split into repeat and hedonic
RED_classified = prepare_hedonic(RED_classified, data_type)[,":="(
hybrid_type = fifelse(rs_id %in% all_rs, "repeat", "hedonic"),
depVar = exp(get(depVar))
)
]
tar_load_globals()
# split into repeat and hedonic
RED_classified = prepare_hedonic(RED_classified, data_type)[,":="(
hybrid_type = fifelse(rs_id %in% all_rs, "repeat", "hedonic"),
depVar = exp(get(depVar))
)
]
# reduce listings to only repeats and set missings to zero
pure_rs = RED_classified[
hybrid_type == "repeat",
..var_to_keep
]
changed_boolean = pure_rs[,
lapply(.SD, function(x){c(NA,diff(x))}),
by = rs_id,
.SDcols = setdiff(var_to_keep,c("rs_id","emonths","depVar","counting_id"))
][,rs_id := NULL] |> rowSums() != 0
is.na(changed_boolean) = FALSE
tar_assert_true(length(changed_boolean) == nrow(pure_rs))
pure_rs[, changed_to := changed_boolean][, changed_from := lead(changed_to,1), by = rs_id]
binary_names = c("balkon","garten","einbaukueche","gaestewc","aufzug","keller","betreut","ausstattung","declared_wohngeld", "baujahr_cat", "first_occupancy", "num_floors", "floors_cat")
cont_names = c("zimmeranzahl")
# this pretty much allows for duplicate indiviudal listings between pure/changed
# sample 1 pure rs
pure_pairs = pure_rs[changed_to == FALSE | changed_from == FALSE]
# sample 2 quality changed rs
changed_pairs = pure_rs[changed_to == TRUE | changed_from == TRUE]
# smaple 3 hedonic
hedonic_listings = RED_classified[hybrid_type == "hedonic", ..var_to_keep]
# type specific setups, mostly for readability
# this is incredibly ugly, refactor it later
# hedonic
hedonic_V = hedonic_listings[["depVar"]]
hedonic_t_month = hedonic_listings[["emonths"]]
hedonic_counting_id = hedonic_listings[["counting_id"]]
# pure
pure_V_t = pure_pairs[["depVar"]]
pure_V_T = pure_pairs[,lag(depVar,1), by = "rs_id"][,rs_id := NULL][["V1"]]
pure_t_month = pure_pairs[["emonths"]]
pure_T_month = pure_pairs[,lag(emonths,1), by = "rs_id"][,rs_id := NULL][["V1"]]
pure_counting_id = pure_pairs[["counting_id"]]
# changed
changed_V_t = changed_pairs[["depVar"]]
changed_V_T = changed_pairs[,lag(depVar,1), by = "rs_id"][,rs_id := NULL][["V1"]]
changed_t_month = changed_pairs[["emonths"]]
changed_T_month = changed_pairs[,lag(emonths,1), by = "rs_id"][,rs_id := NULL][["V1"]]
changed_counting_id = changed_pairs[["counting_id"]]
Z = do.call(rbind, list(
# hedonic
X_1 = make_X_1(hedonic = hedonic_listings, x_conts = cont_names, x_binaries = binary_names, t_month = hedonic_t_month),
# pure
X_2 = make_X_2(pure = pure_pairs, x_conts = cont_names, x_binaries = binary_names, t_month = pure_t_month, T_month = pure_T_month),
# changed
X_3 = make_X_3(
changed = changed_pairs,
x_conts = cont_names,
x_binaries = binary_names,
t_month = changed_t_month,
T_month = changed_T_month
)
))
Y = log(
c(
hedonic_V,
(pure_V_t/pure_V_T),
(changed_V_t/changed_V_T)
)
)
combined_hybrid = cbind(Z,Y)[,counting_id := c(hedonic_counting_id, pure_counting_id, changed_counting_id)] |> na.omit()
# final clean up -> these shouldnt really happend beforehand
combined_hybrid = combined_hybrid[pre_zimmeranzahl != -Inf & sub_zimmeranzahl != -Inf & Y > 0]
f <- sprintf("%s ~ %s",
"Y",
names(Z) |> paste(collapse = " + ")
) |> as.formula()
hybrid_regression = feols(f, combined_hybrid, combine.quick = F, mem.clean = T)
summary(hybrid_regression)
pindex = mean(hybrid_regression$sumFE)
hybrid_regression$sumFE
tst= summary(hybrid_regression)
# remerge fixed effects
combined_hybrid = combined_hybrid[RED_classified[,.SD,.SDcols = c(fixed_effects,"counting_id")], on = "counting_id"]
# remerge fixed effects
combined_hybrid = combined_hybrid[RED_classified[,.SD,.SDcols = c(get(fixed_effects),"counting_id")], on = "counting_id"]
# remerge fixed effects
var_to_keep = c(fixed_effects,"counting_id")
combined_hybrid = combined_hybrid[RED_classified[,.SD,.SDcols = var_to_keep], on = "counting_id"]
fixed_effects
# FE attempt
fixed_effects = list_var$fixed_effects
# remerge fixed effects
var_to_keep = c(fixed_effects,"counting_id")
combined_hybrid = combined_hybrid[RED_classified[,.SD,.SDcols = var_to_keep], on = "counting_id"]
combined_hybrid
base::gc()
library("targets")
tar_make()
tar_make()
RED_classified = tar_load(WK_classified)
prepared_repeated = tar_load(WK_prepared_repeated)
data_type = "WK"
list_var = make_var(data_type = data_type)
tar_load_globals(
)
styler:::style_active_file()
styler:::style_active_file()
list_var = make_var(data_type = data_type)
indepVar = list_var$indepVar
depVar = list_var$depVar
# FE attempt
fixed_effects = list_var$fixed_effects
var_to_keep = c(indepVar,"rs_id","emonths","depVar","counting_id")
# build by me based on Case and Quigley 1991
# get ids of all listings that are classified as repeat sales (pure or changed)
all_rs = prepared_repeated[["rs_id"]] |> unique()
# split into repeat and hedonic
RED_classified = prepare_hedonic(RED_classified, data_type)[,":="(
hybrid_type = fifelse(rs_id %in% all_rs, "repeat", "hedonic"),
depVar = exp(get(depVar))
)
]
# split into repeat and hedonic
RED_classified = prepare_hedonic(RED_classified, data_type)[,":="(
hybrid_type = fifelse(rs_id %in% all_rs, "repeat", "hedonic"),
depVar = exp(get(depVar))
)
]
prepare_hedonic(RED_classified, data_type)
prepared_repeated = WK_prepared_repeated
RED_classified = WK_classified
rm(WK_classified)
# build by me based on Case and Quigley 1991
# get ids of all listings that are classified as repeat sales (pure or changed)
all_rs = prepared_repeated[["rs_id"]] |> unique()
# split into repeat and hedonic
RED_classified = prepare_hedonic(RED_classified, data_type)[,":="(
hybrid_type = fifelse(rs_id %in% all_rs, "repeat", "hedonic"),
depVar = exp(get(depVar))
)
]
# reduce listings to only repeats and set missings to zero
pure_rs = RED_classified[
hybrid_type == "repeat",
..var_to_keep
]
changed_boolean = pure_rs[,
lapply(.SD, function(x){c(NA,diff(x))}),
by = rs_id,
.SDcols = setdiff(var_to_keep,c("rs_id","emonths","depVar","counting_id"))
][,rs_id := NULL] |> rowSums() != 0
is.na(changed_boolean) = FALSE
tar_assert_true(length(changed_boolean) == nrow(pure_rs))
pure_rs[, changed_to := changed_boolean][, changed_from := lead(changed_to,1), by = rs_id]
binary_names = c("balkon","garten","einbaukueche","gaestewc","aufzug","keller","betreut","ausstattung","declared_wohngeld", "baujahr_cat", "first_occupancy", "num_floors", "floors_cat")
cont_names = c("zimmeranzahl")
# this pretty much allows for duplicate indiviudal listings between pure/changed
# sample 1 pure rs
pure_pairs = pure_rs[changed_to == FALSE | changed_from == FALSE]
# sample 2 quality changed rs
changed_pairs = pure_rs[changed_to == TRUE | changed_from == TRUE]
# smaple 3 hedonic
hedonic_listings = RED_classified[hybrid_type == "hedonic", ..var_to_keep]
# type specific setups, mostly for readability
# this is incredibly ugly, refactor it later
# hedonic
hedonic_V = hedonic_listings[["depVar"]]
hedonic_t_month = hedonic_listings[["emonths"]]
hedonic_counting_id = hedonic_listings[["counting_id"]]
# pure
pure_V_t = pure_pairs[["depVar"]]
pure_V_T = pure_pairs[,lag(depVar,1), by = "rs_id"][,rs_id := NULL][["V1"]]
pure_t_month = pure_pairs[["emonths"]]
pure_T_month = pure_pairs[,lag(emonths,1), by = "rs_id"][,rs_id := NULL][["V1"]]
pure_counting_id = pure_pairs[["counting_id"]]
# changed
changed_V_t = changed_pairs[["depVar"]]
changed_V_T = changed_pairs[,lag(depVar,1), by = "rs_id"][,rs_id := NULL][["V1"]]
changed_t_month = changed_pairs[["emonths"]]
changed_T_month = changed_pairs[,lag(emonths,1), by = "rs_id"][,rs_id := NULL][["V1"]]
changed_counting_id = changed_pairs[["counting_id"]]
Z = do.call(rbind, list(
# hedonic
X_1 = make_X_1(hedonic = hedonic_listings, x_conts = cont_names, x_binaries = binary_names, t_month = hedonic_t_month),
# pure
X_2 = make_X_2(pure = pure_pairs, x_conts = cont_names, x_binaries = binary_names, t_month = pure_t_month, T_month = pure_T_month),
# changed
X_3 = make_X_3(
changed = changed_pairs,
x_conts = cont_names,
x_binaries = binary_names,
t_month = changed_t_month,
T_month = changed_T_month
)
))
Y = log(
c(
hedonic_V,
(pure_V_t/pure_V_T),
(changed_V_t/changed_V_T)
)
)
combined_hybrid = cbind(Z,Y)[,counting_id := c(hedonic_counting_id, pure_counting_id, changed_counting_id)] |> na.omit()
# remerge fixed effects
var_to_keep = c(fixed_effects,"counting_id")
combined_hybrid = combined_hybrid[RED_classified[,.SD,.SDcols = var_to_keep], on = c("counting_id")]
# final clean up -> these shouldnt really happend beforehand
combined_hybrid = combined_hybrid[pre_zimmeranzahl != -Inf & sub_zimmeranzahl != -Inf & Y > 0]
f <- sprintf("%s ~ %s | %s",
"Y",
names(Z) |> paste(collapse = " + "),
fixed_effects |> paste(collapse = " + ")
) |> as.formula()
print(names(combined_hybrid))
hybrid_regression = feols(f, combined_hybrid, combine.quick = F, mem.clean = T)
pindex = hybrid_regression$sumFE
out = RED_classified[combined_hybrid[,index := pindex], on = "counting_id"]
base::gc()
tar_load_globals()
tar_load(WM_classified)
RED_classified = WM_classified
rm(WM_classified)
tar_load(WM_prepared_repeated)
prepared_repeated = WM_prepared_repeated
data_type = "WM"
list_var = make_var(data_type = data_type)
indepVar = list_var$indepVar
depVar = list_var$depVar
# FE attempt
fixed_effects = list_var$fixed_effects
var_to_keep = c(indepVar,"rs_id","emonths","depVar","counting_id")
# build by me based on Case and Quigley 1991
# get ids of all listings that are classified as repeat sales (pure or changed)
all_rs = prepared_repeated[["rs_id"]] |> unique()
# split into repeat and hedonic
RED_classified = prepare_hedonic(RED_classified, data_type)[,":="(
hybrid_type = fifelse(rs_id %in% all_rs, "repeat", "hedonic"),
depVar = exp(get(depVar))
)
]
# reduce listings to only repeats and set missings to zero
pure_rs = RED_classified[
hybrid_type == "repeat",
..var_to_keep
]
changed_boolean = pure_rs[,
lapply(.SD, function(x){c(NA,diff(x))}),
by = rs_id,
.SDcols = setdiff(var_to_keep,c("rs_id","emonths","depVar","counting_id"))
][,rs_id := NULL] |> rowSums() != 0
is.na(changed_boolean) = FALSE
tar_assert_true(length(changed_boolean) == nrow(pure_rs))
pure_rs[, changed_to := changed_boolean][, changed_from := lead(changed_to,1), by = rs_id]
binary_names = c("balkon","garten","einbaukueche","gaestewc","aufzug","keller","betreut","ausstattung","declared_wohngeld", "baujahr_cat", "first_occupancy", "num_floors", "floors_cat")
cont_names = c("zimmeranzahl")
# this pretty much allows for duplicate indiviudal listings between pure/changed
# sample 1 pure rs
pure_pairs = pure_rs[changed_to == FALSE | changed_from == FALSE]
# sample 2 quality changed rs
changed_pairs = pure_rs[changed_to == TRUE | changed_from == TRUE]
# smaple 3 hedonic
hedonic_listings = RED_classified[hybrid_type == "hedonic", ..var_to_keep]
# type specific setups, mostly for readability
# this is incredibly ugly, refactor it later
# hedonic
hedonic_V = hedonic_listings[["depVar"]]
hedonic_t_month = hedonic_listings[["emonths"]]
hedonic_counting_id = hedonic_listings[["counting_id"]]
# pure
pure_V_t = pure_pairs[["depVar"]]
pure_V_T = pure_pairs[,lag(depVar,1), by = "rs_id"][,rs_id := NULL][["V1"]]
pure_t_month = pure_pairs[["emonths"]]
pure_T_month = pure_pairs[,lag(emonths,1), by = "rs_id"][,rs_id := NULL][["V1"]]
pure_counting_id = pure_pairs[["counting_id"]]
# changed
changed_V_t = changed_pairs[["depVar"]]
changed_V_T = changed_pairs[,lag(depVar,1), by = "rs_id"][,rs_id := NULL][["V1"]]
changed_t_month = changed_pairs[["emonths"]]
changed_T_month = changed_pairs[,lag(emonths,1), by = "rs_id"][,rs_id := NULL][["V1"]]
changed_counting_id = changed_pairs[["counting_id"]]
Z = do.call(rbind, list(
# hedonic
X_1 = make_X_1(hedonic = hedonic_listings, x_conts = cont_names, x_binaries = binary_names, t_month = hedonic_t_month),
# pure
X_2 = make_X_2(pure = pure_pairs, x_conts = cont_names, x_binaries = binary_names, t_month = pure_t_month, T_month = pure_T_month),
# changed
X_3 = make_X_3(
changed = changed_pairs,
x_conts = cont_names,
x_binaries = binary_names,
t_month = changed_t_month,
T_month = changed_T_month
)
))
X_1 = make_X_1(hedonic = hedonic_listings, x_conts = cont_names, x_binaries = binary_names, t_month = hedonic_t_month)
hedonic_listings
cont_names
binary_names
RED_classified
indepVar
styler:::style_active_file()
X_1 = make_X_1(hedonic = hedonic_listings, x_conts = cont_names, x_binaries = binary_names, t_month = hedonic_t_month)
indepVar
binary_names
base::gc()
tar_make()
indepVar <- c(
# raw
"balkon",
"garten",
"einbaukueche",
"gaestewc",
"aufzug",
"keller",
"betreut",
"ausstattung",
"zimmeranzahl",
# mutated
"declared_wohngeld",
"baujahr_cat",
"first_occupancy",
"num_floors",
"floors_cat"
)
binary_names <- c("balkon", "garten", "einbaukueche", "gaestewc", "aufzug", "keller", "betreut", "ausstattung", "declared_wohngeld", "baujahr_cat", "first_occupancy", "num_floors", "floors_cat")
styler:::style_active_file()
styler:::style_active_file()
tar_make()
tar_visnetwork()
?format
tar_make_future(workers = 3)
tar_load(WM_prepared_hedonic)
data_type = "WM"
prepared_hedonic = WM_prepared_hedonic
tar_load_globals()
list_var = make_var(data_type = data_type)
depVar = list_var$depVar
indepVar = list_var$indepVar
fixed_effects = list_var$fixed_effects
hedonic_coef = feols_regression(
RED_data = prepared_hedonic,
indepVar = indepVar,
depVar = depVar,
fixed_effects = fixed_effects
)
#pindex = (exp(predict(hedonic_coef, prepared_hedonic))-1)*100
pindex = hedonic_coef$sumFE
out = copy(prepared_hedonic)[, index := pindex]
# centralized way of declaring the variables to make adjustments easier
list_var = make_var(data_type = data_type)
base::gc()
tar_make()
tar_make()
?feols
