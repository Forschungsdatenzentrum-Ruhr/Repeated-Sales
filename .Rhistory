"foreach", #parallel looping
"magrittr", #two sided pipe
"progress", # timing utilities
"doSNOW"
)
packages_install(library_string)
######################
#Paths
######################
path = paste0(here(),"/")
readpath = "M:/_FDZ/RWI-GEO/RWI-GEO-RED/daten/On-site/v6/"
writepath = paste0(path,"Output/")
######################
#Functions
######################
source(paste0(path,"Classification.R"))
source(paste0(path,"HelperFunctions.R"))
######################
#Declarations
######################
numCores = detectCores()
registerDoSNOW(makeCluster(numCores))
var_of_interest = c("wohnflaeche","amonths","emonths","zimmeranzahl","etage","price_var")
#,"Wm"
data_types = c("Wk")
######################
#Prep
######################
for(d in 1:length(data_types)){
#load inital data
type = data_types[d]
data = read_dta(paste0(readpath,type,"_allVersionsLabels.dta"))
for(bl_id in 1:16){
#Var Preperation
final_outer = c()
final_list = c()
#Data Preperation
#shrink data to necessary
bl = data %>%
filter(
# subset to federal state
blid == bl_id,
# missings coordinates
!lat_utm < 0 | !lon_utm < 0
) %>%
select(
-freiab,
-mietekaution,
-courtage
) %>%
#new var
mutate(
#coordinate combination
latlon_utm = paste0(lat_utm,lon_utm),
#transform years into months and add running years months
amonths = ajahr * 12 + amonat,
emonths = ejahr * 12 + emonat,
price_var = pmax(mietekalt,kaufpreis),
counting_id = 1:n(),
data_end_date = max(emonths)
)
bl[bl < 0] = NA
#drop missings
bl %<>% drop_na(var_of_interest)
#Loop Preperation
unique_latlon = unique(bl$latlon_utm)
data_end_date = max(bl$emonths)
final_outer = foreach(latlon = unique_latlon[1:1000], .combine = "rbind", .inorder = F, .packages = library_string) %dopar%{
#subset by unique coordinate combination
outer_dummy = filter(bl, latlon_utm == latlon)
#sort by offering start
outer_dummy = outer_dummy[order(outer_dummy$amonths),]
#get unique values for living space and drop missings
unique_wohnflaeche = unique(outer_dummy$wohnflaeche)
classification(unique_wohnflaeche = unique_wohnflaeche, outer_dummy = outer_dummy)
}
}
#count occurences of parent objects
final_outer = distinct(final_outer)
count_parents = final_outer %>% count(obj_parent)
keep_parents = count_parents[1][count_parents[2] > 1]
#drop if object is only its own parent
final_list = final_outer %>% filter(obj_parent %in% keep_parents) %>% arrange(obj_parent,counting_id)
file_name = paste0(type,"_",bl_id,"_repeated_offerings_",Sys.Date(),".dta")
write_dta(final_list,paste0(writepath,file_name))
}
stopImplicitCluster()
warnings()
stopImplicitCluster()
registerDoParallel(cores = numCores)
######################
#Package Install Function
######################
packages_install = function(library_string){
if (!require("pacman")) install.packages("pacman")
pacman::p_load(library_string, character.only = TRUE)
print("Packages fully installed and loaded")
}
######################
#Packages
######################
library_string = c("here", # creating dynamic paths based on script location
"haven", # reading/writing of dta files
"tidyverse", # data manipulation/wrangeling
"doParallel", #parallel processing
"foreach", #parallel looping
"magrittr" #two sided pipe
)
packages_install(library_string)
######################
#Paths
######################
path = paste0(here(),"/")
readpath = "M:/_FDZ/RWI-GEO/RWI-GEO-RED/daten/On-site/v6/"
writepath = paste0(path,"Output/")
######################
#Functions
######################
source(paste0(path,"Classification.R"))
source(paste0(path,"HelperFunctions.R"))
######################
#Declarations
######################
numCores = detectCores()
registerDoParallel(cores = numCores)
var_of_interest = c("wohnflaeche","amonths","emonths","zimmeranzahl","etage","price_var")
#,"Wm"
data_types = c("Wk")
######################
#Prep
######################
for(d in 1:length(data_types)){
#load inital data
type = data_types[d]
data = read_dta(paste0(readpath,type,"_allVersionsLabels.dta"))
for(bl_id in 1:16){
#Var Preperation
final_outer = c()
final_list = c()
#Data Preperation
#shrink data to necessary
bl = data %>%
filter(
# subset to federal state
blid == bl_id,
# missings coordinates
!lat_utm < 0 | !lon_utm < 0
) %>%
select(
-freiab,
-mietekaution,
-courtage
) %>%
#new var
mutate(
#coordinate combination
latlon_utm = paste0(lat_utm,lon_utm),
#transform years into months and add running years months
amonths = ajahr * 12 + amonat,
emonths = ejahr * 12 + emonat,
price_var = pmax(mietekalt,kaufpreis),
counting_id = 1:n(),
data_end_date = max(emonths)
)
bl[bl < 0] = NA
#drop missings
bl %<>% drop_na(var_of_interest)
#Loop Preperation
unique_latlon = unique(bl$latlon_utm)
data_end_date = max(bl$emonths)
final_outer = foreach(latlon = unique_latlon[1:1000], .combine = "rbind", .inorder = F, .packages = library_string) %dopar%{
#subset by unique coordinate combination
outer_dummy = filter(bl, latlon_utm == latlon)
#sort by offering start
outer_dummy = outer_dummy[order(outer_dummy$amonths),]
#get unique values for living space and drop missings
unique_wohnflaeche = unique(outer_dummy$wohnflaeche)
classification(unique_wohnflaeche = unique_wohnflaeche, outer_dummy = outer_dummy)
}
}
#count occurences of parent objects
final_outer = distinct(final_outer)
count_parents = final_outer %>% count(obj_parent)
keep_parents = count_parents[1][count_parents[2] > 1]
#drop if object is only its own parent
final_list = final_outer %>% filter(obj_parent %in% keep_parents) %>% arrange(obj_parent,counting_id)
file_name = paste0(type,"_",bl_id,"_repeated_offerings_",Sys.Date(),".dta")
write_dta(final_list,paste0(writepath,file_name))
}
stopImplicitCluster()
warnings()
######################
#Package Install Function
######################
packages_install = function(library_string){
if (!require("pacman")) install.packages("pacman")
pacman::p_load(library_string, character.only = TRUE)
print("Packages fully installed and loaded")
}
######################
#Packages
######################
library_string = c("here", # creating dynamic paths based on script location
"haven", # reading/writing of dta files
"tidyverse", # data manipulation/wrangeling
"doParallel", #parallel processing
"foreach", #parallel looping
"magrittr" #two sided pipe
)
packages_install(library_string)
######################
#Paths
######################
path = paste0(here(),"/")
readpath = "M:/_FDZ/RWI-GEO/RWI-GEO-RED/daten/On-site/v6/"
writepath = paste0(path,"Output/")
######################
#Functions
######################
source(paste0(path,"Classification.R"))
source(paste0(path,"HelperFunctions.R"))
######################
#Declarations
######################
numCores = detectCores()
registerDoParallel(cores = numCores)
var_of_interest = c("wohnflaeche","amonths","emonths","zimmeranzahl","etage","price_var")
#,"Wm"
data_types = c("Wk")
######################
#Prep
######################
for(d in 1:length(data_types)){
#load inital data
type = data_types[d]
data = read_dta(paste0(readpath,type,"_allVersionsLabels.dta"))
for(bl_id in 1:16){
#Var Preperation
final_outer = c()
final_list = c()
#Data Preperation
#shrink data to necessary
bl = data %>%
filter(
# subset to federal state
blid == bl_id,
# missings coordinates
!lat_utm < 0 | !lon_utm < 0
) %>%
select(
-freiab,
-mietekaution,
-courtage
) %>%
#new var
mutate(
#coordinate combination
latlon_utm = paste0(lat_utm,lon_utm),
#transform years into months and add running years months
amonths = ajahr * 12 + amonat,
emonths = ejahr * 12 + emonat,
price_var = pmax(mietekalt,kaufpreis),
counting_id = 1:n(),
data_end_date = max(emonths)
)
bl[bl < 0] = NA
#drop missings
bl %<>% drop_na(var_of_interest)
#Loop Preperation
unique_latlon = unique(bl$latlon_utm)
data_end_date = max(bl$emonths)
final_outer = foreach(latlon = unique_latlon[1:1000], .combine = "rbind", .inorder = F, .packages = library_string) %dopar%{
#subset by unique coordinate combination
outer_dummy = filter(bl, latlon_utm == latlon)
#sort by offering start
outer_dummy = outer_dummy[order(outer_dummy$amonths),]
#get unique values for living space and drop missings
unique_wohnflaeche = unique(outer_dummy$wohnflaeche)
classification(unique_wohnflaeche = unique_wohnflaeche, outer_dummy = outer_dummy)
}
}
#count occurences of parent objects
final_outer = distinct(final_outer)
count_parents = final_outer %>% count(obj_parent)
keep_parents = count_parents[1][count_parents[2] > 1]
#drop if object is only its own parent
final_list = final_outer %>% filter(obj_parent %in% keep_parents) %>% arrange(obj_parent,counting_id)
file_name = paste0(type,"_",bl_id,"_repeated_offerings_",Sys.Date(),".dta")
write_dta(final_list,paste0(writepath,file_name))
}
stopImplicitCluster()
######################
#Package Install Function
######################
packages_install = function(library_string){
if (!require("pacman")) install.packages("pacman")
pacman::p_load(library_string, character.only = TRUE)
print("Packages fully installed and loaded")
}
######################
#Packages
######################
library_string = c("here", # creating dynamic paths based on script location
"haven", # reading/writing of dta files
"tidyverse", # data manipulation/wrangeling
"doParallel", #parallel processing
"foreach", #parallel looping
"magrittr", #two sided pipe
"progress"
)
packages_install(library_string)
######################
#Paths
######################
path = paste0(here(),"/")
readpath = "M:/_FDZ/RWI-GEO/RWI-GEO-RED/daten/On-site/v6/"
writepath = paste0(path,"Output/")
######################
#Functions
######################
source(paste0(path,"Classification.R"))
source(paste0(path,"HelperFunctions.R"))
######################
#Declarations
######################
numCores = detectCores()
registerDoParallel(cores = numCores)
var_of_interest = c("wohnflaeche","amonths","emonths","zimmeranzahl","etage","price_var")
#,"Wm"
data_types = c("Wk")
######################
#Prep
######################
for(d in 1:length(data_types)){
#load inital data
type = data_types[d]
data = read_dta(paste0(readpath,type,"_allVersionsLabels.dta"))
for(bl_id in 1:1){
#Var Preperation
final_outer = c()
final_list = c()
#Data Preperation
#shrink data to necessary
bl = data %>%
filter(
# subset to federal state
blid == bl_id,
# missings coordinates
!lat_utm < 0 | !lon_utm < 0
) %>%
select(
-freiab,
-mietekaution,
-courtage
) %>%
#new var
mutate(
#coordinate combination
latlon_utm = paste0(lat_utm,lon_utm),
#transform years into months and add running years months
amonths = ajahr * 12 + amonat,
emonths = ejahr * 12 + emonat,
price_var = pmax(mietekalt,kaufpreis),
counting_id = 1:n(),
data_end_date = max(emonths)
)
bl[bl < 0] = NA
#drop missings
bl %<>% drop_na(var_of_interest)
#Loop Preperation
unique_latlon = unique(bl$latlon_utm)
data_end_date = max(bl$emonths)
pbTracker <- function(pb,i,numCores) {
if (i %% numCores == 0) {
pb$tick()
}
}
pb <- progress_bar$new(
format <- " progress [:bar] :percent eta: :eta",
total <- length(unique_latlon[1:1000]) / numCores, clear = FALSE, width= 60)
final_outer = foreach(latlon = unique_latlon[1:1000], .combine = "rbind", .inorder = F, .packages = library_string) %dopar%{
pbTracker(pb,match(latlon,unique_latlon),numCores)
#subset by unique coordinate combination
outer_dummy = filter(bl, latlon_utm == latlon)
#sort by offering start
outer_dummy = outer_dummy[order(outer_dummy$amonths),]
#get unique values for living space and drop missings
unique_wohnflaeche = unique(outer_dummy$wohnflaeche)
classification(unique_wohnflaeche = unique_wohnflaeche, outer_dummy = outer_dummy)
}
}
#count occurences of parent objects
final_outer = distinct(final_outer)
count_parents = final_outer %>% count(obj_parent)
keep_parents = count_parents[1][count_parents[2] > 1]
#drop if object is only its own parent
final_list = final_outer %>% filter(obj_parent %in% keep_parents) %>% arrange(obj_parent,counting_id)
file_name = paste0(type,"_",bl_id,"_repeated_offerings_",Sys.Date(),".dta")
write_dta(final_list,paste0(writepath,file_name))
}
stopImplicitCluster()
View(final_outer)
######################
#Package Install Function
######################
packages_install = function(library_string){
if (!require("pacman")) install.packages("pacman")
pacman::p_load(library_string, character.only = TRUE)
print("Packages fully installed and loaded")
}
######################
#Packages
######################
library_string = c("here", # creating dynamic paths based on script location
"haven", # reading/writing of dta files
"tidyverse", # data manipulation/wrangeling
"doParallel", #parallel processing
"foreach", #parallel looping
"magrittr", #two sided pipe
"progress"
)
packages_install(library_string)
######################
#Paths
######################
path = paste0(here(),"/")
readpath = "M:/_FDZ/RWI-GEO/RWI-GEO-RED/daten/On-site/v6/"
writepath = paste0(path,"Output/")
######################
#Functions
######################
source(paste0(path,"Classification.R"))
source(paste0(path,"HelperFunctions.R"))
######################
#Declarations
######################
numCores = detectCores()
registerDoParallel(cores = numCores)
var_of_interest = c("wohnflaeche","amonths","emonths","zimmeranzahl","etage","price_var")
#,"Wm"
data_types = c("Wk")
######################
#Prep
######################
for(d in 1:length(data_types)){
#load inital data
type = data_types[d]
data = read_dta(paste0(readpath,type,"_allVersionsLabels.dta"))
for(bl_id in 1:1){
#Var Preperation
final_outer = c()
final_list = c()
#Data Preperation
#shrink data to necessary
bl = data %>%
filter(
# subset to federal state
blid == bl_id,
# missings coordinates
!lat_utm < 0 | !lon_utm < 0
) %>%
select(
-freiab,
-mietekaution,
-courtage
) %>%
#new var
mutate(
#coordinate combination
latlon_utm = paste0(lat_utm,lon_utm),
#transform years into months and add running years months
amonths = ajahr * 12 + amonat,
emonths = ejahr * 12 + emonat,
price_var = pmax(mietekalt,kaufpreis),
counting_id = 1:n(),
data_end_date = max(emonths)
)
bl[bl < 0] = NA
#drop missings
bl %<>% drop_na(var_of_interest)
#Loop Preperation
unique_latlon = unique(bl$latlon_utm)
data_end_date = max(bl$emonths)
pb <- progress_bar$new(
format = "[:bar] :elapsed | eta: :eta",
total = length(unique_latlon[1:1000]),
width = 60)
progress <- function(n){
pb$tick()
}
opts <- list(progress = progress)
final_outer = foreach(latlon = unique_latlon[1:1000], .combine = "rbind", .inorder = F, .packages = library_string, .options.snow = opts) %dopar%{
pbTracker(pb,match(latlon,unique_latlon),numCores)
#subset by unique coordinate combination
outer_dummy = filter(bl, latlon_utm == latlon)
#sort by offering start
outer_dummy = outer_dummy[order(outer_dummy$amonths),]
#get unique values for living space and drop missings
unique_wohnflaeche = unique(outer_dummy$wohnflaeche)
classification(unique_wohnflaeche = unique_wohnflaeche, outer_dummy = outer_dummy)
}
}
#count occurences of parent objects
final_outer = distinct(final_outer)
count_parents = final_outer %>% count(obj_parent)
keep_parents = count_parents[1][count_parents[2] > 1]
#drop if object is only its own parent
final_list = final_outer %>% filter(obj_parent %in% keep_parents) %>% arrange(obj_parent,counting_id)
file_name = paste0(type,"_",bl_id,"_repeated_offerings_",Sys.Date(),".dta")
write_dta(final_list,paste0(writepath,file_name))
}
stopImplicitCluster()
