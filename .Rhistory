mutate(
obj_parent = counting_id[1]
) %>%
c(repeated_offerings)
}
return(repeated_offerings)
}
test = removal(data,t_offset = time_offset)
removal = function(data_to_class, t_offset){
repeated_offerings <- c()
while (nrow(data_to_class) > 0) {
candidates = data_to_class %>%
mutate(
# to last date in data
td_to_end = (as.numeric(data_end_date) - as.numeric(emonths)),
# to leading offering
td_to_lead = (lead(as.numeric(amonths)) - as.numeric(emonths)),
# replace last td_to_lead with td_to_end
td_to_lead = replace_na(td_to_lead, td_to_end[is.na(td_to_lead)])
)  %>%
filter(td_to_lead >= t_offset)
ids = candidates %>%
summarise(between_ext(.))
candidates <- cbind(candidates,ids) %>%
filter(repeated_id != -1)
#remove true repeates from options since there can only be one
ids_to_remove <- candidates$counting_id[candidates$repeated_id == 1]
data_to_class %<>% filter(!counting_id %in% ids_to_remove)
if(!is.null(repeated_offerings)) {
repeated_offerings %<>% filter(!counting_id %in% ids_to_remove)
}
repeated_offerings <- candidates %>%
mutate(
obj_parent = counting_id[1]
) %>%
bind_rows(repeated_offerings)
}
return(repeated_offerings)
}
test = removal(data,t_offset = time_offset)
View(test)
View(data)
repeated_offerings <- c()
while (nrow(data_to_class) > 0) {
candidates = data_to_class %>%
mutate(
# to last date in data
td_to_end = (as.numeric(data_end_date) - as.numeric(emonths)),
# to leading offering
td_to_lead = (lead(as.numeric(amonths)) - as.numeric(emonths)),
# replace last td_to_lead with td_to_end
td_to_lead = replace_na(td_to_lead, td_to_end[is.na(td_to_lead)])
)
inital_id = candidates$counting_id[1]
ids = candidates %>%
filter(td_to_lead >= t_offset) %>%
summarise(between_ext(.))
candidates <- cbind(candidates,ids) %>%
filter(repeated_id != -1)
#remove true repeates from options since there can only be one
ids_to_remove <- candidates$counting_id[candidates$repeated_id == 1]
data_to_class %<>% filter(!counting_id %in% ids_to_remove)
if(!is.null(repeated_offerings)) {
if(length(ids_to_remove)> 1 ){
ids_to_remove = c(ids_to_remove, inital_id)
} else {
ids_to_remove = inital_id
}
repeated_offerings %<>% filter(!counting_id %in% ids_to_remove)
}
repeated_offerings <- candidates %>%
mutate(
obj_parent = counting_id[1]
) %>%
bind_rows(repeated_offerings)
}
removal = function(data_to_class, t_offset){
repeated_offerings <- c()
while (nrow(data_to_class) > 0) {
candidates = data_to_class %>%
mutate(
# to last date in data
td_to_end = (as.numeric(data_end_date) - as.numeric(emonths)),
# to leading offering
td_to_lead = (lead(as.numeric(amonths)) - as.numeric(emonths)),
# replace last td_to_lead with td_to_end
td_to_lead = replace_na(td_to_lead, td_to_end[is.na(td_to_lead)])
)
inital_id = candidates$counting_id[1]
ids = candidates %>%
filter(td_to_lead >= t_offset) %>%
summarise(between_ext(.))
candidates <- cbind(candidates,ids) %>%
filter(repeated_id != -1)
#remove true repeates from options since there can only be one
ids_to_remove <- candidates$counting_id[candidates$repeated_id == 1]
data_to_class %<>% filter(!counting_id %in% ids_to_remove)
if(!is.null(repeated_offerings)) {
if(length(ids_to_remove)> 1 ){
ids_to_remove = c(ids_to_remove, inital_id)
} else {
ids_to_remove = inital_id
}
repeated_offerings %<>% filter(!counting_id %in% ids_to_remove)
}
repeated_offerings <- candidates %>%
mutate(
obj_parent = counting_id[1]
) %>%
bind_rows(repeated_offerings)
}
return(repeated_offerings)
}
test = removal(data,t_offset = time_offset)
candidates = data_to_class %>%
mutate(
# to last date in data
td_to_end = (as.numeric(data_end_date) - as.numeric(emonths)),
# to leading offering
td_to_lead = (lead(as.numeric(amonths)) - as.numeric(emonths)),
# replace last td_to_lead with td_to_end
td_to_lead = replace_na(td_to_lead, td_to_end[is.na(td_to_lead)])
) %>% pull(inital_id = candidates$counting_id[1])
removal = function(data_to_class, t_offset){
repeated_offerings <- c()
while (nrow(data_to_class) > 0) {
candidates = data_to_class %>%
mutate(
# to last date in data
td_to_end = (as.numeric(data_end_date) - as.numeric(emonths)),
# to leading offering
td_to_lead = (lead(as.numeric(amonths)) - as.numeric(emonths)),
# replace last td_to_lead with td_to_end
td_to_lead = replace_na(td_to_lead, td_to_end[is.na(td_to_lead)])
)
inital_id = candidates$counting_id[1]
candidates %<>% filter(td_to_lead >= t_offset)
ids = candidates %>% summarise(between_ext(.))
candidates <- cbind(candidates,ids) %>%
filter(repeated_id != -1)
#remove true repeates from options since there can only be one
ids_to_remove <- candidates$counting_id[candidates$repeated_id == 1]
data_to_class %<>% filter(!counting_id %in% ids_to_remove)
if(!is.null(repeated_offerings)) {
if(length(ids_to_remove)> 1 ){
ids_to_remove = c(ids_to_remove, inital_id)
} else {
ids_to_remove = inital_id
}
repeated_offerings %<>% filter(!counting_id %in% ids_to_remove)
}
repeated_offerings <- candidates %>%
mutate(
obj_parent = counting_id[1]
) %>%
bind_rows(repeated_offerings)
}
return(repeated_offerings)
}
test = removal(data,t_offset = time_offset)
View(test)
source("N:/FDZ/Intern/HiWi-Praktikanten/Mitarbeiter/Thorben/repeated offerings/R/classify_data.R")
test = removal(data,t_offset = time_offset)
View(candidates)
View(ids)
debugSource("N:/FDZ/Intern/HiWi-Praktikanten/Mitarbeiter/Thorben/repeated offerings/R/classify_data.R")
View(data_to_class)
View(data_to_class)
View(candidates)
between_id <- merge(inital, t(data), by.x = "rowname", by.y = 0)
View(between_id)
jaccard = between_id %>% tbl_transpose()
View(jaccard)
match(colnames(between_id),"similar_right")
which(colnames(between_id),"similar_right")
match("similar_right",colnames(between_id))
jaccard = between_id %>% tbl_transpose() %>% slice(cutoff)
cutoff = 1:match("similar_right",colnames(between_id))
jaccard = between_id %>% tbl_transpose() %>% slice(cutoff)
jaccard = between_id %>% tbl_transpose() %>% slice(-cutoff)
View(jaccard)
normalise = function(column){
column = (column - min(column))/(max(column)-min(column))
}
jaccard = between_id %>% tbl_transpose() %>% slice(-cutoff) %>% summarise(
across(everything,~normalise(.x))
)
jaccard = between_id %>% tbl_transpose() %>% slice(-cutoff) %>% summarise(
across(everything(),~normalise(.x))
)
normalise = function(column){
column = (column - min(column))/(max(column)-min(column))
}
jaccard = between_id %>% tbl_transpose() %>% slice(-cutoff)
normalise(jaccard$V1)
jaccard$V1
normalise(as.numeric(jaccard$V1))
normalise = function(column){
column = (column - min(column))/(max(column)-min(column))
return(column)
}
normalise(as.numeric(jaccard$V1))
normalise = function(column){
column = (column - column[1])/(column[2]-column[1])
return(column)
}
normalise(as.numeric(jaccard$V1))
?scale
scale(jaccard)
scale(as.numeric(jaccard))
scale(as.numeric(jaccard$V1))
scale(as.numeric(jaccard$V1),center = jaccard$V1[1])
normalise = function(column){
column = (column - column[1])/(column[2]-column[1])
return(column)
}
normalise(as.numeric(jaccard$V2))
jaccard %>% scale(as.numeric(V2), center = mean(V2[1:2]))
jaccard %>% scale(as.numeric(V2), center = mean(V2[1:2]))
centers = jaccard[,1:2]
centers = jaccard[1:2,]
View(centers)
centers = jaccard[1,]
jaccard[1,]
centers = jaccard %>% silce(2)
centers = jaccard %>% slice(2)
View(centers)
centers = jaccard %>% slice(1:2) %>% tbl_transpose()  %>% summarise(mean(.))
centers = jaccard %>% slice(1:2) %>% tbl_transpose()  %>% as.numeric(mean(.))
centers = jaccard %>% slice(1:2) %>% tbl_transpose()
View(centers)
View(centers)
centers = jaccard %>% slice(1:2) %>% tbl_transpose()%>% rowwise()  %>% as.numeric(mean(.))
centers = jaccard %>% slice(1:2) %>% tbl_transpose()%>% rowwise()  %>% summarise(mean(.))
centers = jaccard %>% slice(1:2) %>% tbl_transpose()%>% rowwise()  %>% summarise(mean(evertyhing()))
centers = jaccard %>% slice(1:2) %>% tbl_transpose()%>% rowwise()  %>% summarise(mean(everything()))
centers = jaccard %>% slice(1:2) %>% tbl_transpose() %>% rowMeans()
centers = jaccard %>% slice(1:2) %>% tbl_transpose() %>% as.numeric() %>% rowMeans()
jaccard %>% slice(1:2) %>% tbl_transpose()
centers = jaccard %>% slice(1:2) %>% as.numeric() %>% mean()
centers = jaccard %>% slice(1:2) %>% as.numeric() %>% mean(!!!)
centers = jaccard %>% slice(1:2) %>% as.numeric() %>% mean(!!!.x)
jaccard %>% slice(1:2) %>% as.numeric()
jaccard %>% slice(1:2)
library(targets)
#data = tar_read(classification_1_c840f946)
data = tar_read(plz_group_1)
data = filter(data, latlon_utm == "5984016.0214925618297.400683975")
data = filter(data, latlon_utm == "5984016.0214925618297.400683975")
data = data %>% filter(latlon_utm == "5984016.0214925618297.400683975")
######################
#Package Install and Load
######################
#stuff needs to be hard installed for it to be available to parallel
#there has to be a better way to do this
#used during setup of pipeline
req_library = c(
"targets",
"tarchetypes",
"future",
"future.callr"
)
#used during execution of pipeline
pipeline_library = c(
"here", # creating dynamic paths based on script location
"haven", # reading/writing of dta files
"tidyverse", # data manipulation/wrangeling
"magrittr", #two sided pipe
"fst" # logging utilites
)
#rerun this if packages are changed/missing
# full_library = c(req_library,pipeline_library)
#
# for(package in 1:length(full_library)){
#   install.packages(full_library[package])
#
# }
suppressPackageStartupMessages({
#used during execution of pipeline
library(tidyverse)
library(here)
library(haven)
library(magrittr)
#used during setup of pipeline
library(targets)
library(tarchetypes)
library(future)
library(future.callr)
library(fst)
library(renv)
}
)
data = data %>% filter(latlon_utm == "5984016.0214925618297.400683975")
######################
#Settings
######################
range_offsets <<- tibble::tribble(
~rowname, ~similar_offset, ~exact_offset, ~offset_type,
"wohnflaeche", 0.1, 0.05, "multi",
"etage", 99, 0, "add",
"zimmeranzahl", 0.5, 0, "add",
"time", 0, 6, NA
)
# extract time offset for readability
time_offset <- range_offsets$exact_offset[range_offsets$rowname == "time"]
# drop time for now
col_names <- offsets$rowname[!offsets$rowname == "time"]
offsets = range_offsets
source("N:/FDZ/Intern/HiWi-Praktikanten/Mitarbeiter/Thorben/repeated offerings/R/classify_data.R")
# drop time for now
col_names <- offsets$rowname[!offsets$rowname == "time"]
data %<>% select(col_names)
inital <- tbl_transpose(data[1, ],rownames = NA) %>%
set_colnames("baseline") %>%
rownames_to_column() %>%
merge(offsets, by = "rowname", all.x = T) %>%
summarise(
rowname = rowname,
similar_left = case_when(
offset_type == "add" ~ baseline - similar_offset,
offset_type == "multi" ~ baseline * (1 - similar_offset)
),
similar_right = case_when(
offset_type == "add" ~ baseline + similar_offset,
offset_type == "multi" ~ baseline * (1 + similar_offset)
),
exact_left = case_when(
offset_type == "add" ~ baseline - exact_offset,
offset_type == "multi" ~ baseline * (1 - exact_offset)
),
exact_right = case_when(
offset_type == "add" ~ baseline + exact_offset,
offset_type == "multi" ~ baseline * (1 + exact_offset)
)
)
between_id <- merge(inital, t(data), by.x = "rowname", by.y = 0)
View(between_id)
cutoff = 1:match("similar_right",colnames(between_id))
centers = jaccard %>% slice(1:2) %>% as.numeric() %>% mean()
jaccard %>% scale(as.numeric(V2), center = mean(V2[1:2]))
jaccard = between_id %>% tbl_transpose() %>% slice(-cutoff)
View(jaccard)
jaccard %>% slice(1:2) %>% as.numeric()
jaccard %>% slice(1:2)
jaccard %>% slice(1:2) %>% across(everthing(),as.numeric())
jaccard %>% slice(1:2) %>% across(everything(),as.numeric())
jaccard %>% slice(1:2) %>%
summarise(across(everything(), ~as.numeric(mean(.x))))
jaccard %>% slice(1:2) %>%
summarise(across(everything(), ~as.numeric(.x)))
jaccard %>% slice(1:2) %>%
summarise(across(everything(), ~mean(as.numeric(.x))))
View(inital)
View(data)
data[1, ]
jaccard
jaccard  %>%
summarise(across(everything(), ~scale(as.numeric(.x), centers)))
#this could be swapped to just taking values of first row
#not sure if there is a case where this is worse however
#since its independent of column order
centers = jaccard %>% slice(1:2) %>%
summarise(across(everything(), ~mean(as.numeric(.x))))
jaccard  %>%
summarise(across(everything(), ~scale(as.numeric(.x), centers)))
jaccard/centers
centers
jaccard %*% (1/as.matrix(centers))
scaled_data = as.matrix(jaccard) %*% (1/as.matrix(centers))
as.matrix(jaccard)
as.numeric(as.matrix(jaccard))
as.matrix(as.numeric(jaccard)))
as.matrix(as.numeric(jaccard))
#this could be swapped to just taking values of first row
#not sure if there is a case where this is worse however
#since its independent of column order
jaccard %<>% summarise(across(everything(), as.numeric(.x)))
View(jaccard)
View(inital)
View(data)
data
inital
between_id
View(between_id)
between_id %>% tbl_transpose() %>% slice(-cutoff)
between_id %>% tbl_transpose() %>% slice(-cutoff) %>% sapply(as.numeric(.))
between_id %>% tbl_transpose() %>% slice(-cutoff) %>% dapply(as.numeric(.))
between_id %>% tbl_transpose() %>% slice(-cutoff) %>% lapply(as.numeric(.))
between_id
between_id %>% tbl_transpose()
?as_tibble
between_id %>% tbl_transpose() %>% slice(-cutoff) %>% across(evertyhing(),type.convert())
between_id %>% tbl_transpose() %>% slice(-cutoff) %>% across(everything(),type.convert())
between_id %>% tbl_transpose() %>% slice(-cutoff) %>% summarise(across(everything(),type.convert()))
?type.convert
between_id %>% tbl_transpose() %>% slice(-cutoff) %>%
summarise(
across(
everything(),
~type.convert(.x)))
data[1,]
#this could be swapped to just taking values of first row
#not sure if there is a case where this is worse however
#since its independent of column order
jaccard = between_id %>% tbl_transpose() %>% slice(-cutoff) %>%
summarise(
across(
everything(),
~type.convert(.x,as.is = T)))
centers = jaccard %>% slice(1:2) %>%
summarise(across(everything(), ~mean(as.numeric(.x))))
scaled_data = as.matrix(jaccard) %*% (1/as.matrix(centers))
as.matrix(jaccard)
as.matrix(centers)
centers = jaccard %>% slice(1:2) %>%
summarise(across(everything(), ~mean(.x)))
as.matrix(1/centers)
t(as.matrix(1/centers))
scaled_data = as.matrix(jaccard) %*% t(as.matrix(1/centers))
scaled_data
as.matrix(jaccard)
scaled_data = as.matrix(jaccard) %o% t(as.matrix(1/centers))
scaled_data
centers
as.matrix(jaccard) %o% as.matrix(1/centers)
as.matrix(jaccard)
as.matrix(1/centers)
as.matrix(centers)
39.9 * (1/42)
(1/42)
s.matrix(1/centers)
as.matrix(1/centers)
?%o%
repeated_id = between_id %>%
summarise(
across(
starts_with("V"),
~ case_when(
. >= exact_left & exact_right >= . ~ 1,
. >= similar_left & similar_right >= . ~ 0,
TRUE ~ -1
)
)
)  %>%
summarise(
across(
starts_with("V"),
~ case_when(
-1 %in% . ~ -1,
0 %in% . ~ 0,
TRUE ~ 1
)
)
) %>%
tbl_transpose()
as.matrix(jaccard) %*% as.matrix(1/centers)
as.matrix(jaccard) %*% t(as.matrix(1/centers))
as.matrix(jaccard) %o% as.matrix(1/centers)
scaled_data = as.matrix(jaccard) * as.matrix(1/centers)
as.matrix(jaccard) * as.matrix(1/centers)
as.matrix(jaccard) * t(as.matrix(1/centers))
?"%o%"
scaled_data = as.matrix(jaccard) %o% as.matrix(1/centers)
scaled_data = as.matrix(jaccard) %o% t(as.matrix(1/centers))
scaled_data
scaled_data[1]
scaled_data[[1]]
?scale
scale(jaccard,centers = centers)
centers
as.vector(centers)
scale(jaccard,centers = as.vector(centers))
scale(jaccard))
scale(jaccard)
jaccard
scale(jaccard, center = centers)
View(jaccard)
scale(jaccard, center = centers) +1
scale(jaccard, center = centers,scale = F)
scale(jaccard, scale = centers)
1- scale(jaccard, scale = centers)
1- scale(jaccard,center = F, scale = centers)
scale(jaccard,center = F, scale = centers)
jaccard %>% slice(1:2) %>% scale(.,center = F, scale = centers)
jaccard %>% slice(-1:2) %>% scale(.,center = F, scale = centers)
jaccard %>% slice(-1:-2) %>% scale(.,center = F, scale = centers)
test = jaccard %>% slice(-1:-2) %>% scale(.,center = F, scale = centers)
dist(test, method = "binary")
library(vegan)
as.matrix(vegdist(test, method = "jaccard"))
View(test)
1 - as.matrix(vegdist(test, method = "jaccard"))[1,]
jaccard %>% slice(-1:-2) %>% scale(.,center = F, scale = centers) %>%
as.matrix(vegdist(., method = "jaccard"))[1,]
jaccard %>% slice(-1:-2) %>% scale(.,center = F, scale = centers)
jaccard %>% slice(-1:-2) %>% scale(.,center = F, scale = centers) %>%
as.matrix(vegdist(., method = "jaccard"))
jaccard %>% slice(-1:-2) %>% scale(.,center = F, scale = centers)
test = jaccard %>% slice(-1:-2) %>% scale(.,center = F, scale = centers)
test
View(test)
as.matrix(vegdist(test, method = "jaccard"))[1,]
jaccard_index = function(data_to_jaccard){
# entries with less than zero a this point are removed later
data_to_jaccard[data_to_jaccard < 0] = NA
# same as jaccard for binary input
jaccard = 1 - as.matrix(vegdist(test, method = "jaccard"))[1,]
return(jaccard)
}
test = jaccard %>% slice(-1:-2) %>% scale(.,center = F, scale = centers) %>%
jaccard_index(.)
test
