f = !!!grouping_var,
sparse = F
)
)
# taken from rsmatrix vignette
# see also ?rs_matrix
matrices <- with(
# na.omit here since update joins ignore nomatch = 0 argument
self_merged_rs_pairs,
rs_matrix(
t2 = date,
t1 = prev_date,
p2 = price_var,
p1 = prev_price_var,
f = !!grouping_var,
sparse = F
)
)
?with
# taken from rsmatrix vignette
# see also ?rs_matrix
matrices <- with(
# na.omit here since update joins ignore nomatch = 0 argument
self_merged_rs_pairs,
rs_matrix(
t2 = date,
t1 = prev_date,
p2 = price_var,
p1 = prev_price_var,
f = eval(grouping_var),
sparse = F
)
)
eval(grouping_var)
substitute(grouping_var)
eval(substitute(grouping_var))
eval(!!substitute(grouping_var))
unquote(substitute(grouping_var))
# taken from rsmatrix vignette
# see also ?rs_matrix
matrices <- with(
# na.omit here since update joins ignore nomatch = 0 argument
self_merged_rs_pairs,
rs_matrix(
t2 = date,
t1 = prev_date,
p2 = price_var,
p1 = prev_price_var,
f = {{grouping_var}},
sparse = F
)
)
enquo(grouping_var)
as.name(grouping_var)
# taken from rsmatrix vignette
# see also ?rs_matrix
matrices <- with(
# na.omit here since update joins ignore nomatch = 0 argument
self_merged_rs_pairs,
rs_matrix(
t2 = date,
t1 = prev_date,
p2 = price_var,
p1 = prev_price_var,
f = as.name(grouping_var),
sparse = F
)
)
# taken from rsmatrix vignette
# see also ?rs_matrix
matrices <- with(
# na.omit here since update joins ignore nomatch = 0 argument
self_merged_rs_pairs,
rs_matrix(
t2 = date,
t1 = prev_date,
p2 = price_var,
p1 = prev_price_var,
f = eval(parse(grouping_var)),
sparse = F
)
)
do.call(grouping_var)
# taken from rsmatrix vignette
# see also ?rs_matrix
matrices <- with(
self_merged_rs_pairs,
rs_matrix(
t2 = date,
t1 = prev_date,
p2 = price_var,
p1 = prev_price_var,
f = eval(as.symbol(grouping_var)),
sparse = F
)
)
Z <- matrices("Z")
y <- matrices("y")
X <- matrices("X")
Y <- matrices("Y")
# GRS ---------------------------------------------------------------------
# index via Bailey(1963)
grs_b <- qr.coef(qr(Z), y) |> na.omit()
GRS <- (exp(grs_b) * 100) |> formatC(format = "f", digits = 4)
dt_GRS = data.table(date = names(GRS), GRS = GRS)
# index via Shiller (1991)
ars_b <- qr.coef(
qr(t(Z) %*% X),
t(Z) %*% Y
) |> na.omit()
# this helps the divide by zero issue but is still kinda weird
# doesnt fix the weird values
ars_b[ars_b == 0] = NA
ARS = (100 / ars_b)|> formatC(format = "f", digits = 4)
dt_ARS = data.table(date = rownames(ars_b),ars_b = ars_b, ARS = ARS)
# combined ----------------------------------------------------------------
repeated_indices = dt_GRS[dt_ARS, on = "date"] |>  drop_na()
return(repeated_indices)
View(repeated_indices)
View(self_merged_rs_pairs)
options(error = traceback)
# used during setup of pipeline
req_library <- c(
"targets",
"tarchetypes",
"future",
"future.callr",
"fst",
"renv",
"rlang",
"styler",
"docstring"
)
# used during execution of pipeline
pipeline_library <- c(
"here",
"stringr",
"dplyr",
"tidyr",
"data.table",
"cli",
"glue",
"ggplot2",
"haven", # reading/writing of dta files
"tidyverse", # data manipulation/wrangeling
"magrittr", # two sided pipe
"fst", #
"modelsummary",
"janitor",
"htmlTable"
)
renv::install("plotly")
library(plotly)
## load example data
tar_load(example_markdown_data)
suppressPackageStartupMessages({
# used during setup of pipeline
library(targets)
library(tarchetypes)
library(future)
library(future.callr)
library(fst)
library(renv)
library(rlang)
library(styler)
library(docstring)
library(jsonlite)
# used during execution of pipeline
library(MetBrewer)
library(here)
library(stringr)
library(dplyr)
library(tidyr)
library(data.table)
library(cli)
library(glue)
library(ggplot2)
library(haven)
library(modelsummary)
library(janitor)
library(kableExtra)
library(htmlTable)
library(fixest)
library(magrittr)
library(rsmatrix)
library(ggplot2)
library(qs)
library(plotly)
})
## load example data
tar_load(example_markdown_data)
tar_load(example_markdown_data)
# show head
head(example_markdown_data)
# show summary
summary(example_markdown_data)
# these are globally defined in _targets.R
print(exportJSON)
# make color blind friendly palette
etage_colors = MetBrewer::met.brewer("Egypt", n = uniqueN(example_markdown_data$etage))
plot_ly(example_markdown_data, x = ~wohnflaeche, y = ~zimmeranzahl, z = ~etage, colors = etage_colors) |> add_markers() |> layout(scene = list(
xaxis = list(title = "Wohnflaeche"),
yaxis = list(title = "Zimmeranzahl"),
zaxis = list(title = "Etage")
))
# make color blind friendly palette
etage_colors = MetBrewer::met.brewer("Egypt", n = uniqueN(example_markdown_data$etage))
plot_ly(example_markdown_data, x = ~wohnflaeche, y = ~zimmeranzahl, z = ~etage, colors = etage_colors) |> add_markers() |> layout(scene = list(
xaxis = list(title = "Wohnflaeche"),
yaxis = list(title = "Zimmeranzahl"),
zaxis = list(title = "Etage")
))
options(error = traceback)
# used during setup of pipeline
req_library <- c(
"targets",
"tarchetypes",
"future",
"future.callr",
"fst",
"renv",
"rlang",
"styler",
"docstring"
)
# used during execution of pipeline
pipeline_library <- c(
"here",
"stringr",
"dplyr",
"tidyr",
"data.table",
"cli",
"glue",
"ggplot2",
"haven", # reading/writing of dta files
"tidyverse", # data manipulation/wrangeling
"magrittr", # two sided pipe
"fst", #
"modelsummary",
"janitor",
"htmlTable"
)
suppressPackageStartupMessages({
# used during setup of pipeline
library(targets)
library(tarchetypes)
library(future)
library(future.callr)
library(fst)
library(renv)
library(rlang)
library(styler)
library(docstring)
library(jsonlite)
# used during execution of pipeline
library(MetBrewer)
library(here)
library(stringr)
library(dplyr)
library(tidyr)
library(data.table)
library(cli)
library(glue)
library(ggplot2)
library(haven)
library(modelsummary)
library(janitor)
library(kableExtra)
library(htmlTable)
library(fixest)
library(magrittr)
library(rsmatrix)
library(ggplot2)
library(qs)
library(plotly)
})
tar_load(example_markdown_data)
tar_load(example_markdown_data)
fig1 = plot_ly(example_markdown_data, x = ~wohnflaeche, y = ~zimmeranzahl, z = ~etage, colors = etage_colors) |> add_markers() |> layout(scene = list(
xaxis = list(title = "Wohnflaeche"),
yaxis = list(title = "Zimmeranzahl"),
zaxis = list(title = "Etage")
))
etage_colors = MetBrewer::met.brewer("Egypt", n = uniqueN(example_markdown_data$etage))
fig1 = plot_ly(example_markdown_data, x = ~wohnflaeche, y = ~zimmeranzahl, z = ~etage, colors = etage_colors) |> add_markers() |> layout(scene = list(
xaxis = list(title = "Wohnflaeche"),
yaxis = list(title = "Zimmeranzahl"),
zaxis = list(title = "Etage")
))
plotly::kaleido(fig1)
fig1 = plot_ly(example_markdown_data, x = ~wohnflaeche, y = ~zimmeranzahl, z = ~etage, colors = etage_colors) |> add_markers() |> layout(scene = list(
xaxis = list(title = "Wohnflaeche"),
yaxis = list(title = "Zimmeranzahl"),
zaxis = list(title = "Etage")
))
fig1.show()
fig1
## load example data
tar_load(example_markdown_data)
# make color blind friendly palette
etage_colors = MetBrewer::met.brewer("Egypt", n = uniqueN(example_markdown_data$etage))
fig1 = plot_ly(example_markdown_data, x = ~wohnflaeche, y = ~zimmeranzahl, z = ~etage, colors = etage_colors) |> add_markers() |> layout(scene = list(
xaxis = list(title = "Wohnflaeche"),
yaxis = list(title = "Zimmeranzahl"),
zaxis = list(title = "Etage")
))
rglwidget(fig1)
renv::install("reticulate ")
renv::install("reticulate")
# make color blind friendly palette
etage_colors = MetBrewer::met.brewer("Egypt", n = uniqueN(example_markdown_data$etage))
fig1 = plot_ly(example_markdown_data, x = ~wohnflaeche, y = ~zimmeranzahl, z = ~etage, colors = etage_colors) |> add_markers() |> layout(scene = list(
xaxis = list(title = "Wohnflaeche"),
yaxis = list(title = "Zimmeranzahl"),
zaxis = list(title = "Etage")
))
plotly::kaleido(fig1)
reticulate::py_available()
options(error = traceback)
# used during setup of pipeline
req_library <- c(
"targets",
"tarchetypes",
"future",
"future.callr",
"fst",
"renv",
"rlang",
"styler",
"docstring"
)
# used during execution of pipeline
pipeline_library <- c(
"here",
"stringr",
"dplyr",
"tidyr",
"data.table",
"cli",
"glue",
"ggplot2",
"haven", # reading/writing of dta files
"tidyverse", # data manipulation/wrangeling
"magrittr", # two sided pipe
"fst", #
"modelsummary",
"janitor",
"htmlTable"
)
suppressPackageStartupMessages({
# used during setup of pipeline
library(targets)
library(tarchetypes)
library(future)
library(future.callr)
library(fst)
library(renv)
library(rlang)
library(styler)
library(docstring)
library(jsonlite)
# used during execution of pipeline
library(MetBrewer)
library(here)
library(stringr)
library(dplyr)
library(tidyr)
library(data.table)
library(cli)
library(glue)
library(ggplot2)
library(haven)
library(modelsummary)
library(janitor)
library(kableExtra)
library(htmlTable)
library(fixest)
library(magrittr)
library(rsmatrix)
library(ggplot2)
library(qs)
library(plotly)
})
tar_load(example_markdown_data)
# make color blind friendly palette
etage_colors = MetBrewer::met.brewer("Egypt", n = uniqueN(example_markdown_data$etage))
plot_ly(example_markdown_data, x = ~wohnflaeche, y = ~zimmeranzahl, z = ~etage, colors = etage_colors) |> add_markers() |> layout(scene = list(
xaxis = list(title = "Wohnflaeche"),
yaxis = list(title = "Zimmeranzahl"),
zaxis = list(title = "Etage")
))
# make color blind friendly palette
etage_colors = MetBrewer::met.brewer("Egypt", n = uniqueN(example_markdown_data$etage))
fig1 = plot_ly(example_markdown_data, x = ~wohnflaeche, y = ~zimmeranzahl, z = ~etage, colors = etage_colors) |> add_markers() |> layout(scene = list(
xaxis = list(title = "Wohnflaeche"),
yaxis = list(title = "Zimmeranzahl"),
zaxis = list(title = "Etage")
))
ggsave("tst.svg",fig1)
View(fig1)
renv::install("scatterplot3d")
library(scatterplot3d)
with(
example_markdown_data,
scatterplot3d(x = wohnflaeche, y = zimmeranzahl, z = etage)
)
?scatterplot3d
# make color blind friendly palette
etage_colors = MetBrewer::met.brewer("Egypt", n = uniqueN(example_markdown_data$etage))
with(
example_markdown_data,
scatterplot3d(x = wohnflaeche, y = zimmeranzahl, z = etage, color = etage_colors)
)
# make color blind friendly palette
etage_colors = MetBrewer::met.brewer("Egypt", n = uniqueN(example_markdown_data$etage))
with(
example_markdown_data,
scatterplot3d(x = etage , y = zimmeranzahl, z = wohnflaeche , color = etage_colors)
)
# make color blind friendly palette
etage_colors = MetBrewer::met.brewer("Egypt", n = length(example_markdown_data$etage))
with(
example_markdown_data,
scatterplot3d(x = etage , y = zimmeranzahl, z = wohnflaeche , color = etage_colors)
)
# make color blind friendly palette
etage_colors = MetBrewer::met.brewer("Egypt", n = length(example_markdown_data$etage))
with(
example_markdown_data,
scatterplot3d(x = etage , y = zimmeranzahl, z = wohnflaeche , color = etage_colors, pch = "16")
)
# make color blind friendly palette
etage_colors = MetBrewer::met.brewer("Egypt", n = length(example_markdown_data$etage))
with(
example_markdown_data,
scatterplot3d(x = etage , y = zimmeranzahl, z = wohnflaeche , color = etage_colors, pch = 16)
)
# make color blind friendly palette
etage_colors = MetBrewer::met.brewer("Egypt", n = length(example_markdown_data$etage))
with(
example_markdown_data,
scatterplot3d(x = wohnflaeche , y = zimmeranzahl, z =  etage , color = etage_colors, pch = 16)
)
# make color blind friendly palette
etage_colors = MetBrewer::met.brewer("Egypt", n = length(example_markdown_data$etage))
with(
example_markdown_data,
scatterplot3d(x = wohnflaeche , y = zimmeranzahl, z =  etage , color = etage_colors, pch = 16)
)
# save ordering of ids
occurence_ids <- example_markdown_data[, counting_id]
similarity_lists = make_similarity_lists(example_markdown_data,occurence_ids)
tar_load_globals()
# save ordering of ids
occurence_ids <- example_markdown_data[, counting_id]
similarity_lists = make_similarity_lists(example_markdown_data,occurence_ids)
similarity_index_list = similarity_lists[[1]]
similarity_index_list
similarity_index_list = similarity_lists[[1]]
similarity_index_list[3,3]
similarity_index_list[1:5,1:5]
similarity_dist_list[is.na(similarity_index_list)] = NA
similarity_dist_list = similarity_lists[[2]]
similarity_dist_list[1:5,1:5]
similarity_dist_list[is.na(similarity_index_list)] = NA
# setup and run the actual clustering
clustering <- cluster$new(
cluster_options = similarity_index_list,
distance = similarity_dist_list
)
clustering$determine_cluster_centers()
clustering$centers
## load example data
tar_load(example_markdown_data)
## load example data
tar_load_raw(example_markdown_data)
?tar_load_raw
?tar_load()
## load example data
tar_load_globals()
## load example data
tar_load_globals(store = paste0(main_path,"/_targets"))
here::here("../_targets")
here::here("..")
## load example data
set_here(path = "..")
tar_load_raw(example_markdown_data, store = here::here("_targets"))
## load example data
#make this dynamic
tar_load_raw(example_markdown_data, store ="N:\FDZ\Intern\HiWi-Praktikanten\Mitarbeiter\Thorben\repeated offerings\_targets" )
## load example data
#make this dynamic
tar_load_raw(example_markdown_data, store ="N:/FDZ/Intern/HiWi-Praktikanten/Mitarbeiter/Thorben/repeated offerings/_targets" )
## load example data
#make this dynamic
tar_load(example_markdown_data, store ="N:/FDZ/Intern/HiWi-Praktikanten/Mitarbeiter/Thorben/repeated offerings/_targets")
rm(example_markdown_data)
## load example data
#make this dynamic
tar_load(example_markdown_data, store ="N:/FDZ/Intern/HiWi-Praktikanten/Mitarbeiter/Thorben/repeated offerings/_targets")
tar_make()
tar_make()
tar_load(repeated_index)
View(repeated_index)
tar_load(self_merged_rs_pairs)
?data.table
1 - (0.5 / 100)
tar_make()
tar_make(repeated_index )
tar_load(repeated_index )
View(repeated_index)
