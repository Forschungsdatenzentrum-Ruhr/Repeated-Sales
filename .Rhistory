tar_assert_true(nrow(child_gains) == nrow(parent_gains))
# Compare gains and choose lower sim_dist (more similiarity gained)
# maybe remove best gains and apply recursively?
gains_comparison <- parent_gains[
child_gains,
.(
"counting_id" = counting_id,
"winner_type" = fifelse(
cluster_sim_dist >= single_sim_dist, "child", "parent"
)
),
on = .(parent == counting_id)
]
# split gain-winners into parent-/child type since they cause each
# have different consequences
winner_ids <- split(gains_comparison, by = "winner_type", keep.by = F)
# Unit-Test
# Check if any ids have been assigned as both parent and child winner
tar_assert_true(
!any(winner_ids$child %in% winner_ids$parent),
msg = winner_ids
)
# apply winner selection to initial cluster_centers by anti-joining
# the opposite result
if (length(winner_ids$parent) != 0) {
# all parent-type winners eliminate them being a child of someone else
# NOTE This should be possible in one join but i cant find a way to
# add the latter select into the on statement
child_removal <- competing_parents[
.(winner_ids$parent),
on = .(counting_id = counting_id)
][!parent == counting_id]
# check if this merge did what its intended to do
tar_assert_true(all(child_removal[counting_id %in% winner_ids$parent, counting_id != parent]))
# remove from data and problem list
unique_clustering_centers <- unique_clustering_centers[
!child_removal,
on = .(counting_id, parent)
]
competing_parents = competing_parents_calc(unique_clustering_centers)
if(length(competing_parents) != 0){
parent_children_ids <- competing_parents[
parent == counting_id
]$parent
# redo this until no parent winners are leftover
unique_clustering_centers = parent_child_comptetion(parent_children_ids, unique_clustering_centers)
}
}
# if (length(winner_ids$child) != 0) {
#   # all child-type winners eliminate them being a parent
#   parent_removal <- competing_parents[
#     .(winner_ids$child),
#     on = .(parent = counting_id)
#   ][parent == counting_id]
#
#   # check if this merge did what its intended to do
#   tar_assert_true(all(parent_removal[counting_id %in% winner_ids$child, counting_id == parent]))
#
#
#   parent_removal
# }
return(unique_clustering_centers)
}
if(length(competing_parents) != 0){
parent_children_ids <- competing_parents[
parent == counting_id
]$parent
# redo this until no parent winners are leftover
unique_clustering_centers = parent_child_comptetion(parent_children_ids, unique_clustering_centers)
}
unique_clustering_centers
tar_load_globals()
# empty data.table to appended to
new_names = names(clustering_centers)
final_removal = setNames(data.table(matrix(nrow = 0, ncol = length(new_names))), new_names)
# unique deals with a parent being chosen as such from multiple cluster
# since the parent is the same either way, no special consideration is necessary
unique_clustering_centers <- unique(clustering_centers)
# keep only non-NAs for further considerations
unique_clustering_centers <- unique_clustering_centers[
!is.na(sim_index)
]
# competitions ------------------------------------------------------------
# isolate cases where conflicts arose
competing_parents <- competing_parents_calc(unique_clustering_centers)
competing_parents
# x is potential child of y or z but not itself -> choose lowest sim_dist
# this also contains all listings with are their own parent -> used in first option
parent_parent_winners <- competing_parents[
parent != counting_id,
.SD[which.min(sim_dist)],
by = "counting_id"
]
parent_parent_winners
# isolate losers that arent parents of themselves
parent_parent_loser <- competing_parents[
!parent_parent_winners,
on = .(counting_id, parent)
][parent != counting_id]
parent_parent_loser
# remove non-winning classifications from cluster via anti-join
unique_clustering_centers <- unique_clustering_centers[
!parent_parent_loser,
on = .(counting_id, parent)
]
# recheck if conflicts still exist
competing_parents <- competing_parents_calc(unique_clustering_centers)
competing_parents
# parent vs child competing -----------------------------------------------
# find parents which have conflicting classifications
parent_children_ids <- competing_parents[
parent == counting_id
]$parent
parent_children_ids
unique_clustering_centers = parent_child_comptetion(parent_children_ids, unique_clustering_centers)
base::gc()
tar_load_globals()
tar_load(WM_req_data)
geo_grouped_data = WM_req_data[latlon_utm == "5914585.94429017603205.12213582"]
tst = make_classification(geo_grouped_data)
tar_load_globals()
tst = make_classification(geo_grouped_data)
tar_load_globals()
tst = make_classification(geo_grouped_data)
tar_load_globals()
tst = make_classification(geo_grouped_data)
tar_load_globals()
tst = make_classification(geo_grouped_data)
View(tst)
tar_load_globals()
source("N:/FDZ/Intern/HiWi-Praktikanten/Mitarbeiter/Thorben/repeated offerings/R/other_not_sourced/test_area.R")
debugSource("N:/FDZ/Intern/HiWi-Praktikanten/Mitarbeiter/Thorben/repeated offerings/R/make_/similarity_/parent_child_competition.R")
tst = make_classification(geo_grouped_data)
debugSource("N:/FDZ/Intern/HiWi-Praktikanten/Mitarbeiter/Thorben/repeated offerings/R/make_/similarity_/parent_child_competition.R")
tst = make_classification(geo_grouped_data)
View(parent_children_competitors)
View(competing_parents)
View(parent_gains)
View(gains_comparison)
tar_load_globals()
tst = make_classification(geo_grouped_data)
tst
tar_load_globals()
tst = make_classification(geo_grouped_data)
tar_load_globals()
tst = make_classification(geo_grouped_data)
View(geo_grouped_data)
debugSource("N:/FDZ/Intern/HiWi-Praktikanten/Mitarbeiter/Thorben/repeated offerings/R/make_/similarity_/perform_competitions.R")
tar_load_globals()
tst = make_classification(geo_grouped_data)
source("N:/FDZ/Intern/HiWi-Praktikanten/Mitarbeiter/Thorben/repeated offerings/R/other_not_sourced/test_area.R")
tst = make_classification(geo_grouped_data)
tst = make_classification(geo_grouped_data)
View(parent_parent_winners)
View(parent_gains)
View(gains_comparison)
length(winner_ids$parent)
# empty data.table to appended to
new_names = names(clustering_centers)
final_removal = setNames(data.table(matrix(nrow = 0, ncol = length(new_names))), new_names)
tst = make_classification(geo_grouped_data)
View(gains_comparison)
# isolate cases where conflicts arose
competing_parents <- competing_parents_calc(unique_clustering_centers)
debugSource("N:/FDZ/Intern/HiWi-Praktikanten/Mitarbeiter/Thorben/repeated offerings/R/make_/similarity_/similarity_cost_function.R")
tar_load_globals()
tar_load_globals()
tst = make_classification(geo_grouped_data)
tst = make_classification(geo_grouped_data)
View(competing_parents)
View(parent_parent_loser)
View(competing_parents)
View(unique_clustering_centers)
View(parent_gains)
View(gains_comparison)
View(child_removal)
debugSource("N:/FDZ/Intern/HiWi-Praktikanten/Mitarbeiter/Thorben/repeated offerings/R/make_/similarity_/similarity_cost_function.R")
tar_load_globals()
tst = make_classification(geo_grouped_data)
styler:::style_active_file()
debugSource("N:/FDZ/Intern/HiWi-Praktikanten/Mitarbeiter/Thorben/repeated offerings/R/make_/similarity_/similarity_cost_function.R")
tar_load_globals()
tst = make_classification(geo_grouped_data)
tst = make_classification(geo_grouped_data)
debugSource("N:/FDZ/Intern/HiWi-Praktikanten/Mitarbeiter/Thorben/repeated offerings/R/make_/similarity_/similarity_cost_function.R")
tst = make_classification(geo_grouped_data)
View(competing_parents)
## second option: x child of cluster z -> gain = similarity to parent
# isolate competitors based on ids
child_parent_competitors <- unique_clustering_centers[
.(parent_children_ids),
on = "counting_id"
]
View(winner_ids)
View(child_removal)
View(unique_clustering_centers)
debugSource("N:/FDZ/Intern/HiWi-Praktikanten/Mitarbeiter/Thorben/repeated offerings/R/make_/similarity_/similarity_cost_function.R")
tst = make_classification(geo_grouped_data)
View(unique_clustering_centers)
tar_load_globals()
tst = make_classification(geo_grouped_data)
View(tst)
styler:::style_active_file()
View(tst)
base::gc()
tar_make()
tar_make_future(workers =3)
# test area
library(targets)
tar_load_globals()
tar_load(WM_req_data)
latlon = WM_req_data[counting_id == "7430743"]
latlon = WM_req_data[counting_id == "7430743",.(latlon_utm), with = T]
latlon
latlon = WM_req_data[counting_id == "7430743",.(latlon_utm)][[1]]
geo_grouped_data = WM_req_data[latlon_utm == latlon]
View(geo_grouped_data)
tst = make_classification(geo_grouped_data)
View(tst)
tar_make_future(workers = 2)
tar_make_future(workers = 2)
tar_make_future(workers = 2)
latlon = WM_req_data[counting_id == "15188",.(latlon_utm)][[1]]
geo_grouped_data = WM_req_data[latlon_utm == latlon]
latlon = WM_req_data[counting_id == "2880",.(latlon_utm)][[1]]
latlon = WM_req_data[counting_id == "15188",.(latlon_utm)][[1]]
WM_req_data[counting_id == "15188",.(latlon_utm)]
tar_load_globals()
rm(WM_req_data)
tar_load(WK_req_data)
latlon = WK_req_data[counting_id == "15188",.(latlon_utm)][[1]]
geo_grouped_data = WM_req_data[latlon_utm == latlon]
tst = make_classification(geo_grouped_data)
geo_grouped_data = WK_req_data[latlon_utm == latlon]
tst = make_classification(geo_grouped_data)
geo_grouped_data
make_classification(geo_grouped_data)
debugSource("N:/FDZ/Intern/HiWi-Praktikanten/Mitarbeiter/Thorben/repeated offerings/R/make_/similarity_/similarity_cost_function.R")
tst = make_classification(geo_grouped_data)
View(competing_parents)
View(unique_clustering_centers)
View(clustering_centers)
View(winner_ids)
View(geo_grouped_data)
tst = make_classification(geo_grouped_data)
View(child_removal)
View(unique_clustering_centers)
View(parent_children_competitors)
View(gains_comparison)
tar_load_globals()
tst = make_classification(geo_grouped_data)
debugSource("N:/FDZ/Intern/HiWi-Praktikanten/Mitarbeiter/Thorben/repeated offerings/R/make_/similarity_/similarity_cost_function.R")
tst = make_classification(geo_grouped_data)
View(child_removal)
View(winner_ids)
View(unique_clustering_centers)
1-0.5
debugSource("N:/FDZ/Intern/HiWi-Praktikanten/Mitarbeiter/Thorben/repeated offerings/R/make_/similarity_/similarity_cost_function.R")
tst = make_classification(geo_grouped_data)
tst = make_classification(geo_grouped_data)
debugSource("N:/FDZ/Intern/HiWi-Praktikanten/Mitarbeiter/Thorben/repeated offerings/R/make_/similarity_/similarity_cost_function.R")
tst = make_classification(geo_grouped_data)
tst = make_classification(geo_grouped_data)
debugSource("N:/FDZ/Intern/HiWi-Praktikanten/Mitarbeiter/Thorben/repeated offerings/R/make_/similarity_/similarity_cost_function.R")
tst = make_classification(geo_grouped_data)
tst = make_classification(geo_grouped_data)
tar_load_globals()
tst = make_classification(geo_grouped_data)
tst = make_classification(geo_grouped_data)
View(parent_gains)
View(child_gains)
debugSource("N:/FDZ/Intern/HiWi-Praktikanten/Mitarbeiter/Thorben/repeated offerings/R/make_/similarity_/similarity_cost_function.R")
tst = make_classification(geo_grouped_data)
View(winner_ids)
View(unique_clustering_centers)
debugSource("N:/FDZ/Intern/HiWi-Praktikanten/Mitarbeiter/Thorben/repeated offerings/R/make_/similarity_/similarity_cost_function.R")
tst = make_classification(geo_grouped_data)
View(unique_clustering_centers)
View(winner_ids)
debugSource("N:/FDZ/Intern/HiWi-Praktikanten/Mitarbeiter/Thorben/repeated offerings/R/make_/similarity_/similarity_cost_function.R")
tst = make_classification(geo_grouped_data)
View(winner_ids)
View(gains_comparison)
View(parent_gains)
View(child_gains)
tst = make_classification(geo_grouped_data)
debugSource("N:/FDZ/Intern/HiWi-Praktikanten/Mitarbeiter/Thorben/repeated offerings/R/make_/similarity_/similarity_cost_function.R")
?median
tst = make_classification(geo_grouped_data)
View(winner_ids)
debugSource("N:/FDZ/Intern/HiWi-Praktikanten/Mitarbeiter/Thorben/repeated offerings/R/make_/similarity_/similarity_cost_function.R")
tst = make_classification(geo_grouped_data)
debugSource("N:/FDZ/Intern/HiWi-Praktikanten/Mitarbeiter/Thorben/repeated offerings/R/make_/similarity_/similarity_cost_function.R")
tst = make_classification(geo_grouped_data)
View(winner_ids)
View(gains_comparison)
View(unique_clustering_centers)
View(parent_gains)
View(child_gains)
debugSource("N:/FDZ/Intern/HiWi-Praktikanten/Mitarbeiter/Thorben/repeated offerings/R/make_/similarity_/similarity_cost_function.R")
tar_load_globals()
tst = make_classification(geo_grouped_data)
library(targets)
tar_load_globals()
tar_load(WK_req_data)
latlon = WK_req_data[counting_id == "15188",.(latlon_utm)][[1]]
geo_grouped_data = WK_req_data[latlon_utm == latlon]
tst = make_classification(geo_grouped_data)
debugSource("N:/FDZ/Intern/HiWi-Praktikanten/Mitarbeiter/Thorben/repeated offerings/R/make_/similarity_/similarity_cost_function.R")
tst = make_classification(geo_grouped_data)
View(child_removal)
# determine if these choices are exclusive -> select one with best sim_dist average
child_removal[counting_id %in% parents]
# determine if these choices are exclusive -> select one with best sim_dist average
child_removal[counting_id %in% parent]
# determine if these choices are exclusive -> select one with best sim_dist average
mutual_removals = child_removal[counting_id %in% parent, counting_id, with = T]
mutual_removals
parent_gains
# determine if these choices are exclusive -> select one with best sim_dist average
mutual_removal_pairs = child_removal[counting_id %in% parent, .(counting_id,parent), with = T]
mutual_removal_pairs
# determine if these choices are exclusive -> select one with best sim_dist average
mutual_removal_ids = child_removal[counting_id %in% parent, counting_id, with = T]
mutual_removal_ids
length(mutual_removal_ids)%%2
mutual_removal_pairs = split(mutual_removal_ids, ceiling(seq_along(mutual_removal_ids)/2))
mutual_removal_pairs
parent_gains
# get sim_dist of being a parent
parent_gains[removal_pair, on = "parent"] |> print()
for(removal_pair in mutual_removal_pairs){
# get sim_dist of being a parent
parent_gains[removal_pair, on = "parent"] |> print()
}
?split
debugSource("N:/FDZ/Intern/HiWi-Praktikanten/Mitarbeiter/Thorben/repeated offerings/R/make_/similarity_/similarity_cost_function.R")
tst = make_classification(geo_grouped_data)
debugSource("N:/FDZ/Intern/HiWi-Praktikanten/Mitarbeiter/Thorben/repeated offerings/R/make_/similarity_/similarity_cost_function.R")
tst = make_classification(geo_grouped_data)
debugSource("N:/FDZ/Intern/HiWi-Praktikanten/Mitarbeiter/Thorben/repeated offerings/R/make_/similarity_/similarity_cost_function.R")
tst = make_classification(geo_grouped_data)
mutual_removal_ids[, temp_id := (.N%%2)+1]
mutual_removal_ids
# determine if these choices are exclusive -> select one with best sim_dist average
mutual_removal_ids = child_removal[counting_id %in% parent, counting_id]
mutual_removal_ids[, temp_id := (.N%%2)+1]
mutual_removal_ids
# determine if these choices are exclusive -> select one with best sim_dist average
mutual_removal_ids = child_removal[counting_id %in% parent, counting_id]
str(mutual_removal_ids)
# determine if these choices are exclusive -> select one with best sim_dist average
mutual_removal_ids = child_removal[counting_id %in% parent, .(counting_id)]
mutual_removal_ids[, temp_id := (.N%%2)+1]
mutual_removal_ids[, temp_id := (.I%%2)+1]
mutual_removal_ids[, temp_id := fifelse(
.I%%2,
.I,
.I-1
)]
mutual_removal_ids[, temp_id := fifelse(
.I%%2 == 0,
.I,
.I-1
)]
mutual_removal_ids[, temp_id := fifelse(
.I%%2 == 0,
.I-1,
.I
)]
mutual_removal_ids[, temp_id := seq_along(.N,2)]
mutual_removal_ids[, temp_id := seq(1,.N,2)]
mutual_removal_ids[, temp_id := rep(seq(1,.N,2),2)]
mutual_removal_ids[, temp_id := rep(seq(1,.N,2), each = 2)]
mutual_removal_pairs = mutual_removal_ids[, temp_id := fifelse(
.I%%2 == 0,
.I-1,
.I
)]
mutual_removal_ids = child_removal[counting_id %in% parent, .(parent)]
mutual_removal_ids
# this is probably too complicated, but does its job
# make temp id which groups two consecutive items
mutual_removal_pairs = mutual_removal_ids[parent_gains, temp_id := fifelse(
.I%%2 == 0,
.I-1,
.I
), on = "parent"]
mutual_removal_pairs
# this is probably too complicated, but does its job
# make temp id which groups two consecutive items
mutual_removal_pairs = mutual_removal_ids[parent_gains, on = "parent"]
mutual_removal_pairs
mutual_removal_pairs = NULL
# this is probably too complicated, but does its job
# make temp id which groups two consecutive items
mutual_removal_pairs = mutual_removal_ids[parent_gains, on = "parent"]
mutual_removal_pairs
mutual_removal_ids
mutual_removal_ids[,temp_id :=NULL]
mutual_removal_ids
# this is probably too complicated, but does its job
# make temp id which groups two consecutive items
mutual_removal_pairs = mutual_removal_ids[parent_gains, on = "parent"]
mutual_removal_pairs
mutual_removal_ids
# this is probably too complicated, but does its job
# make temp id which groups two consecutive items
mutual_removal_pairs = parent_gains[mutual_removal_ids, on = "parent"]
mutual_removal_pairs
mutual_removal_pairs = parent_gains[mutual_removal_ids, on = "parent"][,
temp_id := fifelse(
.I%%2 ==0,
.I-1,
.I
)
]
mutual_removal_pairs
mutual_removal_pairs[,.SD[which.min(cluster_sim_dist), by = temp_id]]
mutual_removal_pairs
mutual_removal_pairs[,.SD[which.min(cluster_sim_dist)], by = temp_id]
mutual_removal_pairs[,parent[which.min(cluster_sim_dist)], by = temp_id]
mutual_removal_pairs[,.SD[which.min(cluster_sim_dist), .SDcols = "parent"], by = temp_id]
mutual_removal_pairs[,.SD[which.min(cluster_sim_dist)], by = temp_id][["parent"]]
styler:::style_active_file()
child_removal[ids_to_remove, on = "parent"]
ids_to_remove <- mutual_removal_pairs[, .SD[which.min(cluster_sim_dist)], by = temp_id][["parent"]]
child_removal[ids_to_remove, on = "parent"]
ids_to_remove <- mutual_removal_pairs[, .SD[which.min(cluster_sim_dist)], by = temp_id][,.(parent)]
child_removal[ids_to_remove, on = "parent"]
unique_clustering_centers <- unique_clustering_centers[
!child_removal,
on = .(parent)
]
child_removal[!ids_to_remove, on = "parent"]
tar_load_globals()
tst = make_classification(geo_grouped_data)
tar_load_globals()
tst = make_classification(geo_grouped_data)
debugSource("N:/FDZ/Intern/HiWi-Praktikanten/Mitarbeiter/Thorben/repeated offerings/R/make_/similarity_/similarity_cost_function.R")
tst = make_classification(geo_grouped_data)
mutual_removal_ids
length(mutual_removal_ids) %% 2 == 0
length(mutual_removal_ids) %% 2
length(mutual_removal_ids)
source("N:/FDZ/Intern/HiWi-Praktikanten/Mitarbeiter/Thorben/repeated offerings/R/make_/similarity_/similarity_cost_function.R")
tst = make_classification(geo_grouped_data)
tst = make_classification(geo_grouped_data)
child_removal
ids_to_keep
mutual_removal_ids
mutual_removal_ids[!ids_to_keep, on = "parent"]
child_removal[!mutual_removal_ids[!ids_to_keep, on = "parent"]]
child_removal[!mutual_removal_ids[!ids_to_keep, on = "parent"], on = "parent"]
child_removal
debugSource("N:/FDZ/Intern/HiWi-Praktikanten/Mitarbeiter/Thorben/repeated offerings/R/make_/similarity_/similarity_cost_function.R")
debugSource("N:/FDZ/Intern/HiWi-Praktikanten/Mitarbeiter/Thorben/repeated offerings/R/make_/similarity_/similarity_cost_function.R")
tst = make_classification(geo_grouped_data)
View(unique_clustering_centers)
tst = make_classification(geo_grouped_data)
child_removal
unique_clustering_centers
tst = make_classification(geo_grouped_data)
child_removal
View(unique_clustering_centers)
View(geo_grouped_data)
clustering_centers
new_names
unique(clustering_centers)
unique(clustering_centers$counting_id) %in% unique_clustering_centers$counting_id
tar_assert_true(all(id_check), msg = glue::glue("missings ids:{unique(clustering_centers$counting_id)[id_check]}"))
id_check = unique(clustering_centers$counting_id) %in% unique_clustering_centers$counting_id
tar_assert_true(all(id_check), msg = glue::glue("missings ids:{unique(clustering_centers$counting_id)[id_check]}"))
tar_assert_true(all(id_check), msg = glue::glue("missings ids:{unique(clustering_centers$counting_id)[!id_check]}"))
unique(clustering_centers$counting_id)
unique_clustering_centers$counting_id
anyDuplicated(unique_clustering_centers$counting_id)
unique_clustering_centers$counting_id
debugSource("N:/FDZ/Intern/HiWi-Praktikanten/Mitarbeiter/Thorben/repeated offerings/R/make_/similarity_/similarity_cost_function.R")
tst = make_classification(geo_grouped_data)
child_removal
unique_clustering_centers
View(parent_gains)
View(child_gains)
View(geo_grouped_data)
View(unique_clustering_centers)
parent_parent_loser
debugSource("N:/FDZ/Intern/HiWi-Praktikanten/Mitarbeiter/Thorben/repeated offerings/R/make_/similarity_/similarity_cost_function.R")
tst = make_classification(geo_grouped_data)
source("N:/FDZ/Intern/HiWi-Praktikanten/Mitarbeiter/Thorben/repeated offerings/R/make_/similarity_/similarity_cost_function.R")
tst = make_classification(geo_grouped_data)
tst
View(tst)
debugSource("N:/FDZ/Intern/HiWi-Praktikanten/Mitarbeiter/Thorben/repeated offerings/R/make_/similarity_/similarity_cost_function.R")
tst = make_classification(geo_grouped_data)
View(tst)
debugSource("N:/FDZ/Intern/HiWi-Praktikanten/Mitarbeiter/Thorben/repeated offerings/R/make_/similarity_/similarity_cost_function.R")
debugSource("N:/FDZ/Intern/HiWi-Praktikanten/Mitarbeiter/Thorben/repeated offerings/R/make_/similarity_/similarity_cost_function.R")
tst = make_classification(geo_grouped_data)
library(targets)
tar_load_globals()
tar_load(WK_req_data)
latlon = WK_req_data[counting_id == "15188",.(latlon_utm)][[1]]
geo_grouped_data = WK_req_data[latlon_utm == latlon]
tst = make_classification(geo_grouped_data)
debugSource("N:/FDZ/Intern/HiWi-Praktikanten/Mitarbeiter/Thorben/repeated offerings/R/make_/similarity_/similarity_cost_function.R")
tst = make_classification(geo_grouped_data)
View(tst)
tst = make_classification(geo_grouped_data)
debugSource("N:/FDZ/Intern/HiWi-Praktikanten/Mitarbeiter/Thorben/repeated offerings/R/make_/similarity_/similarity_cost_function.R")
debugSource("N:/FDZ/Intern/HiWi-Praktikanten/Mitarbeiter/Thorben/repeated offerings/R/make_/similarity_/similarity_cost_function.R")
tst = make_classification(geo_grouped_data)
