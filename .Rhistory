# does this make the if within cluster-class irrelevant?
clustering <- cluster$new(
cluster_options = NULL
)
clustering$centers = data.table(
"counting_id" = as.numeric(occurence_ids),
"parent" = as.numeric(occurence_ids),
"sim_dist" = 0,
"sim_index" = 0
)
}
View(geo_grouped_data)
clustering$centers
View(similarity_dist_list)
View(similarity_index_list)
tst = clustering$centers[13101, on = "counting_id"]
tst = clustering$centers["13101", on = "counting_id"]
tst = clustering$centers[13101, on = "counting_id"]
tst = clustering$centers[counting_id==13101]
View(tst)
clustering_centers = tst
competing_parents = clustering_centers[..parent]
competing_parents = clustering_centers[,parent]
competing_parents = clustering_centers[.N=>2,parent, by = "counting_id"]
competing_parents = clustering_centers[.N>=2,parent, by = "counting_id"]
similarity_cost_function = function(clustering_centers = NA){
#' @title WIP
#'
#' @description WIP
#' @param WIP
#' @param WIP
#' @note
#'
#' @return WIP
#' @author Thorben Wiebe
#----------------------------------------------
competing_parents = clustering_centers[.N>=2,parent, by = "counting_id"]
print(competing_parents)
}
clustering$centers <- clustering$centers[
,
similarity_cost_function(.SD)
]
clustering_centers = clustering$centers
competing_parents = clustering_centers[.N>=2, parent, by = "counting_id"]
competing_parents
competing_parents = clustering_centers[.N>=2, "parent", by = "counting_id"]
competing_parents
competing_parents = clustering_centers[, .N>=2 , by = "counting_id"]
competing_parents
competing_parents = clustering_centers[, .SD[.N>=2] , by = "counting_id"]
competing_parents
competing_parents = clustering_centers[, parent[.N>=2] , by = "counting_id"]
competing_parents
competing_cluster = competing_parents[clustering_centers, on = "parent", by = "counting_id"]
competing_parents = clustering_centers[, .SD[.N>=2] , by = "counting_id"]
competing_cluster = competing_parents[clustering_centers, on = "parent", by = "counting_id"]
competing_cluster = competing_parents[clustering_centers, on = "parent", by=.EACHI]
competing_cluster = competing_parents[clustering_centers, on = "parent"]
competing_cluster = competing_parents[clustering_centers, on = "parent", by = "counting_id"]
competing_cluster = competing_parents[clustering_centers, on = "parent", by=.EACHI]
# isolate cases where parents are competing
# this typically means we found one cluster where x is a parent of n children y_n
# but also found a cluster where x is a child to z
# to dissolve this conflict (each observation can only be a parent or child, never both)
# calculate the similiarity gained for both cases and choose the larger gain
competing_parents = clustering_centers[, .SD[.N>=2] , by = "counting_id"]
View(competing_parents)
clustering_centers
# setup and run the actual clustering
clustering <- cluster$new(
cluster_options = similarity_index_list,
distance = similarity_dist_list,
means = rowMeans(similarity_index_list * similarity_dist_list, na.rm = T)
)
clustering$determine_cluster_centers()
clustering$centers
# isolate cases where parents are competing
# this typically means we found one cluster where x is a parent of n children y_n
# but also found a cluster where x is a child to z
# to dissolve this conflict (each observation can only be a parent or child, never both)
# calculate the similiarity gained for both cases and choose the larger gain
competing_parents = clustering_centers[, .SD[.N>=2] , by = "counting_id"]
clustering_centers = clustering$centers
# isolate cases where parents are competing
# this typically means we found one cluster where x is a parent of n children y_n
# but also found a cluster where x is a child to z
# to dissolve this conflict (each observation can only be a parent or child, never both)
# calculate the similiarity gained for both cases and choose the larger gain
competing_parents = clustering_centers[, .SD[.N>=2] , by = "counting_id"]
View(competing_parents)
# isolate cases where parents are competing
# this typically means we found one cluster where x is a parent of n children y_n
# but also found a cluster where x is a child to z
# to dissolve this conflict (each observation can only be a parent or child, never both)
# calculate the similiarity gained for both cases and choose the larger gain
competing_parents = clustering_centers[, .SD[.N>=2] , by = "counting_id"] |> unique()
View(competing_parents)
# isolate cases where parents are competing
# this typically means we found one cluster where x is a parent of n children y_n
# but also found a cluster where x is a child to z
# to dissolve this conflict (each observation can only be a parent or child, never both)
# calculate the similiarity gained for both cases and choose the larger gain
competing_parents = unique(clustering_centers)[, .SD[.N>=2] , by = "counting_id"]
View(competing_parents)
competing_cluster = clustering_centers[competing_parents, on = "parent", by=.EACHI]
competing_cluster = clustering_centers[competing_parents, on = "parent"]
View(competing_cluster)
View(competing_cluster)
competing_parents[parent == 13091  ]
competing_parents = competing_parents[parent == 13091]
competing_cluster = clustering_centers[competing_parents, on = "parent"]
View(competing_cluster)
# isolate cases where parents are competing
# this typically means we found one cluster where x is a parent of n children y_n
# but also found a cluster where x is a child to z
# to dissolve this conflict (each observation can only be a parent or child, never both)
# calculate the similiarity gained for both cases and choose the larger gain
competing_parents = unique(clustering_centers)[, .SD[.N>=2] , by = "counting_id"]
View(competing_parents)
# reduce problem size for now
competing_parents = competing_parents[counting_id == 13011]
# isolate cases where parents are competing
# this typically means we found one cluster where x is a parent of n children y_n
# but also found a cluster where x is a child to z
# to dissolve this conflict (each observation can only be a parent or child, never both)
# calculate the similiarity gained for both cases and choose the larger gain
competing_parents = unique(clustering_centers)[, .SD[.N>=2] , by = "counting_id"]
View(competing_parents)
# reduce problem size for now
competing_parents = competing_parents[counting_id == 13101]
View(competing_parents)
# isolate cases where parents are competing
# this typically means we found one cluster where x is a parent of n children y_n
# but also found a cluster where x is a child to z
# to dissolve this conflict (each observation can only be a parent or child, never both)
# calculate the similiarity gained for both cases and choose the larger gain
competing_parents = unique(clustering_centers)[, .SD[.N>=2 & which.min(sim_dist)] , by = "counting_id"]
View(competing_parents)
# isolate cases where parents are competing
# this typically means we found one cluster where x is a parent of n children y_n
# but also found a cluster where x is a child to z
# to dissolve this conflict (each observation can only be a parent or child, never both)
# calculate the similiarity gained for both cases and choose the larger gain
competing_parents = unique(clustering_centers)[, .SD[.N>=2] , by = "counting_id"]
competing_cluster = competing_parents[, parent, by = "counting_id"]
View(competing_cluster)
# first option: child of cluster z -> gain = similarity to parent
# another way to think about it: ^ is lost if the other option is chosen
first_option = competing_parents[, .SD[which.min(sim_dist)]]
View(first_option)
# first option: child of cluster z -> gain = similarity to parent
# another way to think about it: ^ is lost if the other option is chosen
first_option = competing_parents[, .SD[which.min(sim_dist)], by = "counting_id" ]
View(first_option)
# unique deals with a parent being chosen as such from multiple listings
# since the parent is the same either way, no special consideration is necessary
competing_parents = unique(clustering_centers)[, .SD[.N>=2] , by = "counting_id"]
View(competing_parents)
# parent vs parent competing:
# x is potential child of y or z but not itself -> choose lowest sim_dist
lowest_sim_dist = competing_parents[, .SD[which.min(sim_dist)], by = "counting_id"]
View(lowest_sim_dist)
# parent vs parent competing:
# x is potential child of y or z but not itself -> choose lowest sim_dist
lowest_sim_dist = competing_parents[counting_id != parent, .SD[which.min(sim_dist)], by = "counting_id"]
# parent vs parent competing:
# x is potential child of y or z but not itself -> choose lowest sim_dist
lowest_sim_dist = competing_parents[!(counting_id == parent), .SD[which.min(sim_dist)], by = "counting_id"]
View(lowest_sim_dist)
# parent vs parent competing:
# x is potential child of y or z but not itself -> choose lowest sim_dist
lowest_sim_dist = competing_parents[, .SD[which.min(sim_dist)], by = "counting_id"]
View(lowest_sim_dist)
lowest_sim_dist = lowest_sim_dist[parent != counting_id]
View(lowest_sim_dist)
# isolate cases where there is pure parent vs parent competition
parent_parent_winners = lowest_sim_dist[parent != counting_id]
# third option: x parent of cluster x with children y_n -> gain = sum(similiarity of children)
parent_children_competitors = competing_parents[!parent_parent_winners]
# third option: x parent of cluster x with children y_n -> gain = sum(similiarity of children)
parent_children_competitors = competing_parents[!parent_parent_winners, on = "parent"]
View(parent_children_competitors)
# third option: x parent of cluster x with children y_n -> gain = sum(similiarity of children)
parent_children_competitors = clustering_centers[!parent_parent_winners, on = "parent"]
View(parent_children_competitors)
# third option: x parent of cluster x with children y_n -> gain = sum(similiarity of children)
parent_children_competitors = competing_parents[!parent_parent_winners, on = "parent"]
parent_children_competitors
## parent vs child competing:
# first option: x parent of cluster x with children y_n -> gain = sum(similiarity of children)
parent_children_competitors = competing_parents[!parent_parent_winners,..parent , on = "parent"]
## parent vs child competing:
# first option: x parent of cluster x with children y_n -> gain = sum(similiarity of children)
parent_children_competitors = competing_parents[!parent_parent_winners, on = "parent"]$parent
parent_cluster = clustering_centers[parent_parent_competitors, on = "parent"]
## parent vs child competing:
# first option: x parent of cluster x with children y_n -> gain = sum(similiarity of children)
parent_children_competitors = competing_parents[!parent_parent_winners, on = "parent"]$parent
parent_cluster = clustering_centers[parent_parent_competitors, on = "parent"]
parent_cluster = clustering_centers[parent_children_competitors, on = "parent"]
## parent vs child competing:
# first option: x parent of cluster x with children y_n -> gain = sum(similiarity of children)
parent_children_competitors = competing_parents[!parent_parent_winners, parent, on = "parent"]
parent_cluster = clustering_centers[parent_children_competitors, on = "parent"]
## parent vs child competing:
# first option: x parent of cluster x with children y_n -> gain = sum(similiarity of children)
parent_children_competitors = competing_parents[!parent_parent_winners, parent, on = "parent"] |> setDT()
## parent vs child competing:
# first option: x parent of cluster x with children y_n -> gain = sum(similiarity of children)
parent_children_competitors = competing_parents[!parent_parent_winners, on = "parent"]
parent_cluster = clustering_centers[parent_children_competitors, on = "parent"]
View(parent_cluster)
## parent vs child competing:
# first option: x parent of cluster x with children y_n -> gain = sum(similiarity of children)
parent_children_competitors = competing_parents[!parent_parent_winners, on = "parent"]
View(parent_children_competitors)
## parent vs child competing:
# first option: x parent of cluster x with children y_n -> gain = sum(similiarity of children)
parent_children_competitors = parent_parent_competitors[!parent_parent_winners, on = "parent"]
# parent vs parent competing:
# x is potential child of y or z but not itself -> choose lowest sim_dist
# this also contains all listings with are their own parent -> used in first option
parent_parent_competitors = competing_parents[, .SD[which.min(sim_dist)], by = "counting_id"]
# isolate cases where there is pure parent vs parent competition
parent_parent_winners = lowest_sim_dist[parent != counting_id]
## parent vs child competing:
# first option: x parent of cluster x with children y_n -> gain = sum(similiarity of children)
parent_children_competitors = parent_parent_competitors[!parent_parent_winners, on = "parent"]
View(parent_children_competitors)
# unique deals with a parent being chosen as such from multiple listings
# since the parent is the same either way, no special consideration is necessary
competing_parents = unique(clustering_centers)[, .SD[.N>=2] , by = "counting_id"]
# parent vs parent competing:
# x is potential child of y or z but not itself -> choose lowest sim_dist
# this also contains all listings with are their own parent -> used in first option
parent_parent_competitors = competing_parents[, .SD[which.min(sim_dist)], by = "counting_id"]
# isolate cases where there is pure parent vs parent competition
parent_parent_winners = lowest_sim_dist[parent != counting_id]
## parent vs child competing:
# first option: x parent of cluster x with children y_n -> gain = sum(similiarity of children)
parent_children_competitors = lowest_sim_dist[parent == counting_id]
# unique deals with a parent being chosen as such from multiple listings
# since the parent is the same either way, no special consideration is necessary
competing_parents = unique(clustering_centers)[, .SD[.N>=2] , by = "counting_id"]
# parent vs parent competing:
# x is potential child of y or z but not itself -> choose lowest sim_dist
# this also contains all listings with are their own parent -> used in first option
parent_parent_competitors = competing_parents[, .SD[which.min(sim_dist)], by = "counting_id"]
# isolate cases where there is pure parent vs parent competition
parent_parent_winners = lowest_sim_dist[parent != counting_id]
## parent vs child competing:
# first option: x parent of cluster x with children y_n -> gain = sum(similiarity of children)
parent_children_competitors = lowest_sim_dist[parent == counting_id]
View(competing_parents)
# parent vs parent competing:
# x is potential child of y or z but not itself -> choose lowest sim_dist
# this also contains all listings with are their own parent -> used in first option
parent_parent_competitors = competing_parents[, .SD[which.min(sim_dist)], by = "counting_id"]
View(parent_parent_competitors)
# isolate cases where there is pure parent vs parent competition
parent_parent_winners = lowest_sim_dist[parent != counting_id]
## parent vs child competing:
# first option: x parent of cluster x with children y_n -> gain = sum(similiarity of children)
parent_children_competitors = lowest_sim_dist[parent == counting_id]
lowest_sim_dist[parent == counting_id]
lowest_sim_dist
# parent vs parent competing:
# x is potential child of y or z but not itself -> choose lowest sim_dist
# this also contains all listings with are their own parent -> used in first option
parent_parent_competitors = competing_parents[, .SD[which.min(sim_dist)], by = "counting_id"]
# isolate cases where there is pure parent vs parent competition
parent_parent_winners = parent_parent_competitors[parent != counting_id]
## parent vs child competing:
# first option: x parent of cluster x with children y_n -> gain = sum(similiarity of children)
parent_children_competitors = parent_parent_competitors[parent == counting_id]
View(parent_children_competitors)
parent_cluster = clustering_centers[parent_children_competitors, on = "parent"]
View(parent_cluster)
View(parent_parent_competitors)
View(competing_parents)
# unique deals with a parent being chosen as such from multiple listings
# since the parent is the same either way, no special consideration is necessary
# TODO: consider dropping NAs in sim_index here aswell since these should never be chosen
competing_parents = unique(clustering_centers)[, .SD[.N>=2] , by = "counting_id"]
View(competing_parents)
# parent vs parent competing:
# x is potential child of y or z but not itself -> choose lowest sim_dist
# this also contains all listings with are their own parent -> used in first option
parent_parent_competitors = competing_parents[, .SD[which.min(sim_dist)], by = "counting_id"]
View(parent_parent_competitors)
# isolate cases where there was pure parent vs parent competition
# this likely influences parent vs children competiton and should be remerged to initial data
parent_parent_winners = parent_parent_competitors[parent != counting_id]
## parent vs child competing:
# first option: x parent of cluster x with children y_n -> gain = sum(similiarity of children)
parent_children_competitors = parent_parent_competitors[parent == counting_id]
View(parent_parent_competitors)
View(parent_children_competitors)
parent_cluster = clustering_centers[parent_children_competitors, on = "parent"]
View(parent_cluster)
parent_cluster = clustering_centers[.(parent_children_competitors), on = "parent"]
## parent vs child competing:
# first option: x parent of cluster x with children y_n -> gain = sum(similiarity of children)
parent_children_competitors = parent_parent_competitors[parent == counting_id]$parent
parent_cluster = clustering_centers[.(parent_children_competitors), on = "parent"]
parent_cluster = clustering_centers[.(parent_children_competitors),
cluster_sim_dist = sum(sim_dist),
by = "parent"
on = "parent"]
parent_cluster = clustering_centers[.(parent_children_competitors),
cluster_sim_dist = sum(sim_dist),
by = "parent",
on = "parent"]
styler:::style_active_file()
styler:::style_active_file()
parent_cluster <- clustering_centers[
.(parent_children_competitors),
on = "parent"
][,
cluster_sim_dist := sum(sim_dist),
by = "parent",
]
parent_cluster <- clustering_centers[
.(parent_children_competitors),
on = "parent"
][,
cluster_sim_dist = sum(sim_dist),
by = "parent",
]
parent_cluster <- clustering_centers[
.(parent_children_competitors),
on = "parent"
][,
.("cluster_sim_dist" = sum(sim_dist)),
by = "parent",
]
View(parent_cluster)
# second option: x child of cluster z -> gain = similarity to parent
# another way to think about it: ^ is lost if the other option is chosen
child_gains = clustering_centers[
.(parent_children_competitors),
on = "counting_id"
]
View(child_gains)
View(child_gains)
# second option: x child of cluster z -> gain = similarity to parent
# another way to think about it: ^ is lost if the other option is chosen
child_gains = competing_parents[
.(parent_children_competitors),
on = "counting_id"
]
# second option: x child of cluster z -> gain = similarity to parent
# another way to think about it: ^ is lost if the other option is chosen
child_gains = parent_parent_competitors[
.(parent_children_competitors),
on = "counting_id"
]
View(child_gains)
# second option: x child of cluster z -> gain = similarity to parent
# another way to think about it: ^ is lost if the other option is chosen
child_gains = parent_parent_competitors[
.(parent_children_competitors),
on = "parent"
]
View(child_gains)
# second option: x child of cluster z -> gain = similarity to parent
# another way to think about it: ^ is lost if the other option is chosen
child_gains = clustering_centers[
.(parent_children_competitors),
on = "parent"
][parent != counting_id]
View(child_gains)
# second option: x child of cluster z -> gain = similarity to parent
# another way to think about it: ^ is lost if the other option is chosen
child_gains = clustering_centers[
.(parent_children_competitors),
on = "parent"
][.(parent_parent_competitors),
on = "parent"
]
View(child_gains)
parent_parent_competitors
# second option: x child of cluster z -> gain = similarity to parent
# another way to think about it: ^ is lost if the other option is chosen
child_gains = clustering_centers[
.(parent_children_competitors),
on = "parent"
][!.(parent_parent_competitors),
on = "parent"
]
# second option: x child of cluster z -> gain = similarity to parent
# another way to think about it: ^ is lost if the other option is chosen
child_gains = clustering_centers[
.(parent_children_competitors),
on = "parent"
]
View(child_gains)
# second option: x child of cluster z -> gain = similarity to parent
# another way to think about it: ^ is lost if the other option is chosen
child_gains = clustering_centers[
.(parent_children_competitors),
on = "counting_id"
]
View(child_gains)
# second option: x child of cluster z -> gain = similarity to parent
# another way to think about it: ^ is lost if the other option is chosen
child_gains = clustering_centers[
.(parent_children_competitors),
on = "counting_id"
][!parent_children_competitors, on = "parent"]
# second option: x child of cluster z -> gain = similarity to parent
# another way to think about it: ^ is lost if the other option is chosen
child_gains = clustering_centers[
!.(parent_children_competitors),
on = "parent"
]
# second option: x child of cluster z -> gain = similarity to parent
# another way to think about it: ^ is lost if the other option is chosen
child_gains = clustering_centers[
.(parent_children_competitors),
on = "counting_id"
][
!.(parent_children_competitors),
on = "parent"
]
parent_gains <- clustering_centers[
.(parent_children_competitors),
on = "parent"
][,
.("cluster_sim_dist" = sum(sim_dist)),
by = "parent",
]
# second option: x child of cluster z -> gain = similarity to parent
# another way to think about it: ^ is lost if the other option is chosen
child_gains = clustering_centers[
.(parent_children_competitors),
on = "counting_id"
][
!.(parent_children_competitors),
on = "parent"
]
child_gains[parent_gains]
View(child_gains)
# second option: x child of cluster z -> gain = similarity to parent
# another way to think about it: ^ is lost if the other option is chosen
child_gains = clustering_centers[
.(parent_children_competitors),
on = "counting_id"
][
!.(parent_children_competitors),
.("single_sim_dist" = sim_dist),
on = "parent"
]
parent_gains
children_gains
child_gains
# second option: x child of cluster z -> gain = similarity to parent
# another way to think about it: ^ is lost if the other option is chosen
child_gains = clustering_centers[
.(parent_children_competitors),
on = "counting_id"
][
!.(parent_children_competitors),
.("parent" = parent,"single_sim_dist" = sim_dist),
on = "parent"
]
parent_gains
child_gains
# second option: x child of cluster z -> gain = similarity to parent
# another way to think about it: ^ is lost if the other option is chosen
child_gains = clustering_centers[
.(parent_children_competitors),
on = "counting_id"
][
!.(parent_children_competitors),
.("counting_id" = counting_id,"single_sim_dist" = sim_dist),
on = "parent"
]
parent_gains
child_gains
gains_comparison
gains_comparison = parent_gains[
child_gains,
on = .(parent == counting_id)
]
gains_comparison
gains_comparison = parent_gains[
child_gains,
.("parent_bool" := fcase(
cluster_sim_dist >= single_sim_dist, "parent",
TRUE, "child"
)),
on = .(parent == counting_id)
]
gains_comparison = parent_gains[
child_gains,
"parent_bool" := .(fcase(
cluster_sim_dist >= single_sim_dist, "parent",
TRUE, "child"
)),
on = .(parent == counting_id)
]
gains_comparison = parent_gains[
child_gains,
"winner" := fifelse(
cluster_sim_dist >= single_sim_dist, "parent", "child"
),
on = .(parent == counting_id)
]
gains_comparison
View(gains_comparison)
