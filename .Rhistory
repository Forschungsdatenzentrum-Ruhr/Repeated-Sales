prev_cols = setdiff(intersect(rs_pairs,rs_pairs),"parent")
prev_cols = setdiff(intersect(names(rs_pairs),names(rs_pairs)),"parent")
?setnames
setnames(self_merged_rs_pairs,glue::glue("i.{prev_cols}", glue::glue("prev_{prev_cols}")
self_merged_rs_pairs = rs_pairs[rs_pairs, on = c("parent==parent"), nomatch =0]
setnames(self_merged_rs_pairs,glue::glue("i.{prev_cols}", glue::glue("prev_{prev_cols}"))
?setnames
self_merged_rs_pairs[]
}
self_merged_rs_pairs = rs_pairs[rs_pairs, on = c("parent==parent"), nomatch =0]
setnames(self_merged_rs_pairs,glue::glue("i.{prev_cols}"), glue::glue("prev_{prev_cols}"))
self_merged_rs_pairs
?data.table
?as.Date
?yearmon
?as.date
?as.Date
# reverse year to month conversion done during initial reading
# since functions require dates
rs_pairs[, .(
year = emonths %/% 12,
month = (emonths / 12) - (emonths %/% 12)
)]
# reverse year to month conversion done during initial reading
# since functions require dates
rs_pairs[, .(
year = emonths %/% 12,
month = emonths - ((emonths %/% 12)*12)
)]
rs_pairs[, .(
year = emonths %/% 12,
month = emonths - ((emonths %/% 12)*12)
) |> paste0(year,"-",month, "-01") |> as.Date(format = "YYYY-MM-DD")
]
styler:::style_active_file()
# reverse year to month conversion done during initial reading
# since functions require dates
rs_pairs[, date := paste0(
# years in format YYYY
emonths %/% 12,
"-",
# months in format MM
emonths - ((emonths %/% 12) * 12),
"-01"
) |> as.Date(format = "YYYY-MM-DD")]
rs_pairs
# reverse year to month conversion done during initial reading
# since functions require dates
rs_pairs[, date := paste0(
# years in format YYYY
emonths %/% 12,
"-",
# months in format MM
emonths - ((emonths %/% 12) * 12),
"-01"
) |> as.Date(format = "%Y-%M-%D")]
rs_pairs
# reverse year to month conversion done during initial reading
# since functions require dates
rs_pairs[, date := paste0(
# years in format YYYY
emonths %/% 12,
"-",
# months in format MM
emonths - ((emonths %/% 12) * 12),
"-01"
) #|> as.Date(format = "%Y-%M-%D")
]
rs_pairs
# reverse year to month conversion done during initial reading
# since functions require dates
rs_pairs[, sprintf(
"%d-%02d-01",
emonths %/% 12,
emonths - ((emonths %/% 12) * 12)
)
]
rs_pairs[, sprintf(
"%d-%02d-01",
emonths %/% 12,
emonths - ((emonths %/% 12) * 12)
) |> as.Date(format = "%Y-%m-%d")
]
tst_a = 2015 * 12 + 5
tst_a%/%12
tst_a = 2015 * 12 + 1
tst_a%/%12
tst_a _ tst_a%/%12
tst_a - tst_a%/%12
tst_a - tst_a%/%12*12
tst_a = 2015 * 12 + 12
tst_a - tst_a%/%12*12
rs_pairs[, sprintf(
"%d-%02d-01",
emonths %/% 12,
emonths - ((emonths %/% 12) * 12)
)
]
# reverse year to month conversion done during initial reading
# since functions require dates
rs_pairs[, .(month = emonths - ((emonths %/% 12) * 12), year = emonths %/% 12)]
# reverse year to month conversion done during initial reading
# since functions require dates
rs_pairs[, .(month = emonths - ((emonths %/% 12) * 12), year = emonths %/% 12)][
month == 0, ":="(month = 12, year = year -1)
]
rs_pairs
# reverse year to month conversion done during initial reading
# since functions require dates
rs_pairs[, .(month = emonths - ((emonths %/% 12) * 12), year = emonths %/% 12)][
month == 0, .(month = 12, year = year -1)
]
rs_pairs[, .(month = emonths - ((emonths %/% 12) * 12), year = emonths %/% 12)]
# reverse year to month conversion done during initial reading
# since functions require dates
ym_tst = rs_pairs[, .(month = emonths - ((emonths %/% 12) * 12), year = emonths %/% 12)][
month == 0, .(month = 12, year = year -1)
]
ym_tst
# reverse year to month conversion done during initial reading
# since functions require dates
ym_tst = rs_pairs[, .(month = emonths - ((emonths %/% 12) * 12), year = emonths %/% 12)][
month == 0, ":="(month = 12, year = year -1)
]
ym_tst
head(ym_tst)
year_months[,"year"]
# reverse year to month conversion done during initial reading
# since functions require dates
year_months = rs_pairs[, .(year = emonths %/% 12, month = emonths - ((emonths %/% 12) * 12))][
month == 0, ":="(month = 12, year = year -1)
]
year_months[,"year"]
rs_pairs[, sprintf(
"%d-%02d-01",
year_months[,"year"],
year_months[,"month"]
)
]
year_months[,"year", with = T]
year_months[,"year", with = F]
class(year_months[,"year", with = T])
class(year_months[,"year", with = F])
as.numeric(year_months[,"year"])
as.numeric(year_months[,"year", with = F])
as.numeric(year_months[,"year", with = T])
year_months[,"year"] |>  pull()
year_months[["year"]]
# reverse year to month conversion done during initial reading
# since functions require dates
rs_pairs[, ":="(year = emonths %/% 12, month = emonths - ((emonths %/% 12) * 12))][
month == 0, ":="(month = 12, year = year -1)
]
rs_pairs
unique(rs_pairs[["month"]])
unique(rs_pairs[["year"]])
styler:::style_active_file()
styler:::style_active_file()
styler:::style_active_file()
renv::install("rsmatrix")
library(rsmatrix)
# drop merges made on exact same listing
# taken from rsmatrix vignette
matrices = with(
self_merged_rs_pairs[counting_id != prev_counting_id],
rs_matrix(date,prev_date,price_var, prev_price_var, sparse = T)
)
vars_needed <- c("counting_id", "parent", "emonths", "price_var")
rs_pairs <- classification[non_list_reason == "Sold", ..vars_needed]
setkey(rs_pairs, "parent")
# reverse year to month conversion done during initial reading since subsequent functions require dates
rs_pairs[
, ":="(
year = emonths %/% 12,
month = emonths - ((emonths %/% 12) * 12)
)
][
# december is converted to an additional year, is this already a problem before this?
# maybe use yearmon from zoo instead, shouldnt be a big change
month == 0,
":="(
month = 12,
year = year - 1
)
]
rs_pairs[, ":="(
# sprintf is used to pad leading zeros for months while pasteing at the same time
# %d means digits
# %02d means digit with leading zeros until length 2
date = sprintf(
"%d-%02d-01",
year,
month
) |>  as.Date(format = "%Y-%m-%d"),
# drop year + month columns
year = NULL,
month = NULL,
emonths = NULL
)]
# extract columns whose names are getting i. prefix during self-merge
prev_cols <- setdiff(intersect(names(rs_pairs), names(rs_pairs)), "parent")
# self-merge data to construct required data structure
self_merged_rs_pairs <- rs_pairs[rs_pairs, on = c("parent==parent"), nomatch = 0]
# rename columns for clarity
setnames(self_merged_rs_pairs, glue::glue("i.{prev_cols}"), glue::glue("prev_{prev_cols}"))
# drop merges made on exact same listing
# taken from rsmatrix vignette
matrices = with(
self_merged_rs_pairs[counting_id != prev_counting_id],
rs_matrix(date,prev_date,price_var, prev_price_var, sparse = T)
)
self_merged_rs_pairs[counting_id != prev_counting_id]
# drop merges made on exact same listing
# taken from rsmatrix vignette
matrices = with(
self_merged_rs_pairs[counting_id != prev_counting_id & date > prev_date],
rs_matrix(date,prev_date,price_var, prev_price_var, sparse = T)
)
Z = matrices("Z")
head(Z)
View(Z)
Z@x
y = matrices("y")
grs = exp(solve(crossprod(Z), crossprod(Z,y)))
y
self_merged_rs_pairs[
counting_id != prev_counting_id &
date > prev_date &
price_var != prev_price_var
]
log(1)
self_merged_rs_pairs[
# listings merged on themselves
counting_id != prev_counting_id &
# opposite shouldnt be occuring, have to check
date > prev_date &
# price = 0 throws error
(price_var == 0| prev_price_var == 0)
]
matrices = with(
self_merged_rs_pairs[
# listings merged on themselves
counting_id != prev_counting_id &
# opposite shouldnt be occuring, have to check
date > prev_date &
# price = 0 throws error
(price_var != 0 & prev_price_var != 0)
]
self_merged_rs_pairs[
# listings merged on themselves
counting_id != prev_counting_id &
# opposite shouldnt be occuring, have to check
date > prev_date &
# price = 0 throws error
(price_var != 0 & prev_price_var != 0)
]
styler:::style_active_file()
tar_make()
# used during setup of pipeline
req_library <- c(
"targets",
"tarchetypes",
"future",
"future.callr",
"fst",
"renv",
"rlang",
"styler",
"docstring"
)
# used during execution of pipeline
pipeline_library <- c(
"here",
"stringr",
"dplyr",
"tidyr",
"data.table",
"cli",
"glue",
"ggplot2",
"haven", # reading/writing of dta files
"tidyverse", # data manipulation/wrangeling
"magrittr", # two sided pipe
"fst", #
"modelsummary",
"janitor",
"htmlTable"
)
suppressPackageStartupMessages({
# used during setup of pipeline
library(targets)
library(tarchetypes)
library(future)
library(future.callr)
library(fst)
library(renv)
library(rlang)
library(styler)
library(docstring)
library(jsonlite)
# used during execution of pipeline
library(here)
library(stringr)
library(dplyr)
library(tidyr)
library(data.table)
library(cli)
library(glue)
library(ggplot2)
library(haven)
library(modelsummary)
library(janitor)
library(kableExtra)
library(htmlTable)
library(fixest)
})
tar_make_future(workers = 4)
tar_load(classification )
names(classification )
tar_load(classification_blid_8 )
names(classification_blid_8 )
tar_make()
tar_make()
tar_load(classification_blid_2)
names(classification_blid_2)
tar_make()
traceback()
options(error=traceback)
tar_make89
tar_make()
options(error=recover)
tar_load(classification )
names(classification )
datasummary_skim(classification)
tst = head(classification, n = 1000)
View(tst)
rm(classification)
rm(classification_blid_2)
rm(classification_blid_8)
tar_make()
?data.table
tar_make()
options(error=traceback)
tar_make()
tar_make()
tar_make()
tar_make()
tar_make()
tar_make()
tar_make()
tar_load(RED_classified)
vars_needed <- c("counting_id", "rs_id", "emonths", "kaufpreis", "kid2019")
# tst_vars_needed = c(vars_needed, "latlon_utm","kid2015","gid2015","gid2019")
rs_pairs <- RED_classified["Sold", on = "non_list_reason", ..vars_needed]
setkey(rs_pairs, "rs_id", "counting_id")
# reverse year to month conversion done during initial reading since subsequent functions require dates
rs_pairs[
, ":="(
year = emonths %/% 12,
month = emonths - ((emonths %/% 12) * 12)
)
][
# december is converted to an additional year, is this already a problem before this?
# maybe use yearmon from zoo instead, shouldnt be a big change
month == 0,
":="(
month = 12,
year = year - 1
)
]
rs_pairs[, ":="(
# sprintf is used to pad leading zeros for months while pasteing at the same time
# %d means digits
# %02d means digit with leading zeros until length 2
date = sprintf(
"%d-%02d-01",
year,
month
) |> as.Date(format = "%Y-%m-%d"),
# drop year + month columns
year = NULL,
month = NULL,
emonths = NULL
)]
# extract columns whose names are getting i. prefix during self-merge
prev_cols <- setdiff(intersect(names(rs_pairs), names(rs_pairs)),c("rs_id","date"))
# self-merge data to construct required data structure
self_merged_rs_pairs <- rs_pairs[
rs_pairs,
on = c("rs_id==rs_id","date>date"),
.(glue::glue("prev_{prev_cols}")) := .(glue::glue("i.{prev_cols}")),
nomatch = 0
]
# self-merge data to construct required data structure
self_merged_rs_pairs <- rs_pairs[
rs_pairs,
on = c("rs_id==rs_id","date>date"),
(glue::glue("prev_{prev_cols}")) := .(glue::glue("i.{prev_cols}")),
nomatch = 0
]
prev_cols
# extract columns whose names are getting i. prefix during self-merge
prev_cols <- setdiff(intersect(names(rs_pairs), names(rs_pairs)),"rs_id"))
# extract columns whose names are getting i. prefix during self-merge
prev_cols <- setdiff(intersect(names(rs_pairs), names(rs_pairs)),"rs_id")
prev_cols
# extract columns whose names are getting i. prefix during self-merge
#prev_cols <- setdiff(intersect(names(rs_pairs), names(rs_pairs)),"rs_id")
prev_cols <- c("kaufpreis","date","counting_id")
# self-merge data to construct required data structure
self_merged_rs_pairs <- rs_pairs[
rs_pairs,
on = c("rs_id==rs_id","date>date"),
(glue::glue("prev_{prev_cols}")) := .(glue::glue("i.{prev_cols}")),
nomatch = 0
]
# self-merge data to construct required data structure
self_merged_rs_pairs <- rs_pairs[
rs_pairs,
on = c("rs_id==rs_id","date>date"),
(glue::glue("prev_{prev_cols}")) := (glue::glue("i.{prev_cols}")),
nomatch = 0
]
glue::glue("prev_{prev_cols}")
glue::glue("i.{prev_cols}")
# self-merge data to construct required data structure
self_merged_rs_pairs <- rs_pairs[
rs_pairs,
on = c("rs_id==rs_id","date>date"),
(glue::glue("prev_{prev_cols}")) := mget(glue::glue("i.{prev_cols}")),
nomatch = 0
]
print(names(self_merged_rs_pairs))
View(rs_pairs)
View(self_merged_rs_pairs)
tar_assert_true(self_merged_rs_pairs[date >= prev_date, .N] == 0)
self_merged_rs_pairs[date > prev_date, .N]
tst = self_merged_rs_pairs[date > prev_date, ]
View(tst)
tst = self_merged_rs_pairs[prev_date > date , ]
tar_assert_true(self_merged_rs_pairs[date > prev_date, .N] == 0)
self_merged_rs_pairs[date > prev_date, .N]
tar_assert_true(self_merged_rs_pairs[prev_date > date, .N] == 0)
?with
# taken from rsmatrix vignette
matrices <- with(
self_merged_rs_pairs,
rs_matrix(
t2 = date,
t1 = prev_date,
p2 = price_var,
p1 = prev_price_var,
f = kid2019, # grouping variable
sparse = T
)
)
library(rsmatrix)
# taken from rsmatrix vignette
matrices <- with(
self_merged_rs_pairs,
rs_matrix(
t2 = date,
t1 = prev_date,
p2 = price_var,
p1 = prev_price_var,
f = kid2019, # grouping variable
sparse = T
)
)
# taken from rsmatrix vignette
matrices <- with(
self_merged_rs_pairs,
rs_matrix(
t2 = date,
t1 = prev_date,
p2 = kaufpreis,
p1 = prev_kaufpreis,
f = kid2019, # grouping variable
sparse = T
)
)
self_merged_rs_pairs[!is.na(.SD)]
self_merged_rs_pairs[,Reduce("&", lapply(.SD, is.na))]
na.omit(self_merged_rs_pairs)
?mget
mget(glue::glue("i.{prev_cols}"))
# taken from rsmatrix vignette
matrices <- with(
na.omit(self_merged_rs_pairs),
rs_matrix(
t2 = date,
t1 = prev_date,
p2 = kaufpreis,
p1 = prev_kaufpreis,
f = kid2019, # grouping variable
sparse = T
)
)
Z <- matrices("Z")
y <- matrices("y")
X <- matrices("X")
Y <- matrices("Y")
# GRS ---------------------------------------------------------------------
# index via Bailey(1963)
grs_b <- qr.coef(qr(Z), y)
GRS <- exp(grs_b) * 100
na.omit(self_merged_rs_pairs)
tst = na.omit(self_merged_rs_pairs)
View(tst)
GRS
View(GRS)
unique(tst$kid2019)
